// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// PermissionsColumns holds the columns for the "permissions" table.
	PermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
	}
	// PermissionsTable holds the schema information for the "permissions" table.
	PermissionsTable = &schema.Table{
		Name:       "permissions",
		Columns:    PermissionsColumns,
		PrimaryKey: []*schema.Column{PermissionsColumns[0]},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password_hash", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "last_login", Type: field.TypeTime},
		{Name: "is_active", Type: field.TypeBool, Default: false},
		{Name: "email_verified", Type: field.TypeBool, Default: false},
		{Name: "verification_token", Type: field.TypeString, Nullable: true},
		{Name: "verification_token_expiry", Type: field.TypeTime, Nullable: true},
		{Name: "password_reset_token", Type: field.TypeString, Nullable: true},
		{Name: "password_reset_token_expiry", Type: field.TypeTime, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// RolesPermissionsColumns holds the columns for the "roles_permissions" table.
	RolesPermissionsColumns = []*schema.Column{
		{Name: "roles_id", Type: field.TypeInt},
		{Name: "permissions_id", Type: field.TypeInt},
	}
	// RolesPermissionsTable holds the schema information for the "roles_permissions" table.
	RolesPermissionsTable = &schema.Table{
		Name:       "roles_permissions",
		Columns:    RolesPermissionsColumns,
		PrimaryKey: []*schema.Column{RolesPermissionsColumns[0], RolesPermissionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "roles_permissions_roles_id",
				Columns:    []*schema.Column{RolesPermissionsColumns[0]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "roles_permissions_permissions_id",
				Columns:    []*schema.Column{RolesPermissionsColumns[1]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UsersRolesColumns holds the columns for the "users_roles" table.
	UsersRolesColumns = []*schema.Column{
		{Name: "users_id", Type: field.TypeInt},
		{Name: "roles_id", Type: field.TypeInt},
	}
	// UsersRolesTable holds the schema information for the "users_roles" table.
	UsersRolesTable = &schema.Table{
		Name:       "users_roles",
		Columns:    UsersRolesColumns,
		PrimaryKey: []*schema.Column{UsersRolesColumns[0], UsersRolesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_roles_users_id",
				Columns:    []*schema.Column{UsersRolesColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "users_roles_roles_id",
				Columns:    []*schema.Column{UsersRolesColumns[1]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		PermissionsTable,
		RolesTable,
		UsersTable,
		RolesPermissionsTable,
		UsersRolesTable,
	}
)

func init() {
	RolesPermissionsTable.ForeignKeys[0].RefTable = RolesTable
	RolesPermissionsTable.ForeignKeys[1].RefTable = PermissionsTable
	UsersRolesTable.ForeignKeys[0].RefTable = UsersTable
	UsersRolesTable.ForeignKeys[1].RefTable = RolesTable
}
