// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shammianand/go-auth/ent/rolepermissions"
	"github.com/shammianand/go-auth/ent/roles"
	"github.com/shammianand/go-auth/ent/userroles"
)

// RolesCreate is the builder for creating a Roles entity.
type RolesCreate struct {
	config
	mutation *RolesMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (rc *RolesCreate) SetCode(s string) *RolesCreate {
	rc.mutation.SetCode(s)
	return rc
}

// SetName sets the "name" field.
func (rc *RolesCreate) SetName(s string) *RolesCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetDescription sets the "description" field.
func (rc *RolesCreate) SetDescription(s string) *RolesCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rc *RolesCreate) SetNillableDescription(s *string) *RolesCreate {
	if s != nil {
		rc.SetDescription(*s)
	}
	return rc
}

// SetIsSystem sets the "is_system" field.
func (rc *RolesCreate) SetIsSystem(b bool) *RolesCreate {
	rc.mutation.SetIsSystem(b)
	return rc
}

// SetNillableIsSystem sets the "is_system" field if the given value is not nil.
func (rc *RolesCreate) SetNillableIsSystem(b *bool) *RolesCreate {
	if b != nil {
		rc.SetIsSystem(*b)
	}
	return rc
}

// SetIsDefault sets the "is_default" field.
func (rc *RolesCreate) SetIsDefault(b bool) *RolesCreate {
	rc.mutation.SetIsDefault(b)
	return rc
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (rc *RolesCreate) SetNillableIsDefault(b *bool) *RolesCreate {
	if b != nil {
		rc.SetIsDefault(*b)
	}
	return rc
}

// SetMaxUsers sets the "max_users" field.
func (rc *RolesCreate) SetMaxUsers(i int) *RolesCreate {
	rc.mutation.SetMaxUsers(i)
	return rc
}

// SetNillableMaxUsers sets the "max_users" field if the given value is not nil.
func (rc *RolesCreate) SetNillableMaxUsers(i *int) *RolesCreate {
	if i != nil {
		rc.SetMaxUsers(*i)
	}
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *RolesCreate) SetCreatedAt(t time.Time) *RolesCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RolesCreate) SetNillableCreatedAt(t *time.Time) *RolesCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RolesCreate) SetUpdatedAt(t time.Time) *RolesCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RolesCreate) SetNillableUpdatedAt(t *time.Time) *RolesCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RolesCreate) SetID(i int) *RolesCreate {
	rc.mutation.SetID(i)
	return rc
}

// AddUserRoleIDs adds the "user_roles" edge to the UserRoles entity by IDs.
func (rc *RolesCreate) AddUserRoleIDs(ids ...uuid.UUID) *RolesCreate {
	rc.mutation.AddUserRoleIDs(ids...)
	return rc
}

// AddUserRoles adds the "user_roles" edges to the UserRoles entity.
func (rc *RolesCreate) AddUserRoles(u ...*UserRoles) *RolesCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return rc.AddUserRoleIDs(ids...)
}

// AddRolePermissionIDs adds the "role_permissions" edge to the RolePermissions entity by IDs.
func (rc *RolesCreate) AddRolePermissionIDs(ids ...int) *RolesCreate {
	rc.mutation.AddRolePermissionIDs(ids...)
	return rc
}

// AddRolePermissions adds the "role_permissions" edges to the RolePermissions entity.
func (rc *RolesCreate) AddRolePermissions(r ...*RolePermissions) *RolesCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddRolePermissionIDs(ids...)
}

// Mutation returns the RolesMutation object of the builder.
func (rc *RolesCreate) Mutation() *RolesMutation {
	return rc.mutation
}

// Save creates the Roles in the database.
func (rc *RolesCreate) Save(ctx context.Context) (*Roles, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RolesCreate) SaveX(ctx context.Context) *Roles {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RolesCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RolesCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RolesCreate) defaults() {
	if _, ok := rc.mutation.IsSystem(); !ok {
		v := roles.DefaultIsSystem
		rc.mutation.SetIsSystem(v)
	}
	if _, ok := rc.mutation.IsDefault(); !ok {
		v := roles.DefaultIsDefault
		rc.mutation.SetIsDefault(v)
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := roles.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := roles.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RolesCreate) check() error {
	if _, ok := rc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Roles.code"`)}
	}
	if v, ok := rc.mutation.Code(); ok {
		if err := roles.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Roles.code": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Roles.name"`)}
	}
	if v, ok := rc.mutation.Name(); ok {
		if err := roles.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Roles.name": %w`, err)}
		}
	}
	if _, ok := rc.mutation.IsSystem(); !ok {
		return &ValidationError{Name: "is_system", err: errors.New(`ent: missing required field "Roles.is_system"`)}
	}
	if _, ok := rc.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New(`ent: missing required field "Roles.is_default"`)}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Roles.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Roles.updated_at"`)}
	}
	return nil
}

func (rc *RolesCreate) sqlSave(ctx context.Context) (*Roles, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RolesCreate) createSpec() (*Roles, *sqlgraph.CreateSpec) {
	var (
		_node = &Roles{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(roles.Table, sqlgraph.NewFieldSpec(roles.FieldID, field.TypeInt))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.Code(); ok {
		_spec.SetField(roles.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(roles.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.SetField(roles.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rc.mutation.IsSystem(); ok {
		_spec.SetField(roles.FieldIsSystem, field.TypeBool, value)
		_node.IsSystem = value
	}
	if value, ok := rc.mutation.IsDefault(); ok {
		_spec.SetField(roles.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if value, ok := rc.mutation.MaxUsers(); ok {
		_spec.SetField(roles.FieldMaxUsers, field.TypeInt, value)
		_node.MaxUsers = &value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(roles.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(roles.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rc.mutation.UserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   roles.UserRolesTable,
			Columns: []string{roles.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userroles.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RolePermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   roles.RolePermissionsTable,
			Columns: []string{roles.RolePermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepermissions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RolesCreateBulk is the builder for creating many Roles entities in bulk.
type RolesCreateBulk struct {
	config
	err      error
	builders []*RolesCreate
}

// Save creates the Roles entities in the database.
func (rcb *RolesCreateBulk) Save(ctx context.Context) ([]*Roles, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Roles, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RolesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RolesCreateBulk) SaveX(ctx context.Context) []*Roles {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RolesCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RolesCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
