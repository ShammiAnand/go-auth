// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shammianand/go-auth/ent/predicate"
	"github.com/shammianand/go-auth/ent/roles"
	"github.com/shammianand/go-auth/ent/userroles"
	"github.com/shammianand/go-auth/ent/users"
)

// UserRolesUpdate is the builder for updating UserRoles entities.
type UserRolesUpdate struct {
	config
	hooks    []Hook
	mutation *UserRolesMutation
}

// Where appends a list predicates to the UserRolesUpdate builder.
func (uru *UserRolesUpdate) Where(ps ...predicate.UserRoles) *UserRolesUpdate {
	uru.mutation.Where(ps...)
	return uru
}

// SetUserID sets the "user_id" field.
func (uru *UserRolesUpdate) SetUserID(u uuid.UUID) *UserRolesUpdate {
	uru.mutation.SetUserID(u)
	return uru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uru *UserRolesUpdate) SetNillableUserID(u *uuid.UUID) *UserRolesUpdate {
	if u != nil {
		uru.SetUserID(*u)
	}
	return uru
}

// SetRoleID sets the "role_id" field.
func (uru *UserRolesUpdate) SetRoleID(i int) *UserRolesUpdate {
	uru.mutation.SetRoleID(i)
	return uru
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (uru *UserRolesUpdate) SetNillableRoleID(i *int) *UserRolesUpdate {
	if i != nil {
		uru.SetRoleID(*i)
	}
	return uru
}

// SetAssignedBy sets the "assigned_by" field.
func (uru *UserRolesUpdate) SetAssignedBy(u uuid.UUID) *UserRolesUpdate {
	uru.mutation.SetAssignedBy(u)
	return uru
}

// SetNillableAssignedBy sets the "assigned_by" field if the given value is not nil.
func (uru *UserRolesUpdate) SetNillableAssignedBy(u *uuid.UUID) *UserRolesUpdate {
	if u != nil {
		uru.SetAssignedBy(*u)
	}
	return uru
}

// ClearAssignedBy clears the value of the "assigned_by" field.
func (uru *UserRolesUpdate) ClearAssignedBy() *UserRolesUpdate {
	uru.mutation.ClearAssignedBy()
	return uru
}

// SetUser sets the "user" edge to the Users entity.
func (uru *UserRolesUpdate) SetUser(u *Users) *UserRolesUpdate {
	return uru.SetUserID(u.ID)
}

// SetRole sets the "role" edge to the Roles entity.
func (uru *UserRolesUpdate) SetRole(r *Roles) *UserRolesUpdate {
	return uru.SetRoleID(r.ID)
}

// Mutation returns the UserRolesMutation object of the builder.
func (uru *UserRolesUpdate) Mutation() *UserRolesMutation {
	return uru.mutation
}

// ClearUser clears the "user" edge to the Users entity.
func (uru *UserRolesUpdate) ClearUser() *UserRolesUpdate {
	uru.mutation.ClearUser()
	return uru
}

// ClearRole clears the "role" edge to the Roles entity.
func (uru *UserRolesUpdate) ClearRole() *UserRolesUpdate {
	uru.mutation.ClearRole()
	return uru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uru *UserRolesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uru.sqlSave, uru.mutation, uru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uru *UserRolesUpdate) SaveX(ctx context.Context) int {
	affected, err := uru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uru *UserRolesUpdate) Exec(ctx context.Context) error {
	_, err := uru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uru *UserRolesUpdate) ExecX(ctx context.Context) {
	if err := uru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uru *UserRolesUpdate) check() error {
	if _, ok := uru.mutation.UserID(); uru.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserRoles.user"`)
	}
	if _, ok := uru.mutation.RoleID(); uru.mutation.RoleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserRoles.role"`)
	}
	return nil
}

func (uru *UserRolesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userroles.Table, userroles.Columns, sqlgraph.NewFieldSpec(userroles.FieldID, field.TypeUUID))
	if ps := uru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uru.mutation.AssignedBy(); ok {
		_spec.SetField(userroles.FieldAssignedBy, field.TypeUUID, value)
	}
	if uru.mutation.AssignedByCleared() {
		_spec.ClearField(userroles.FieldAssignedBy, field.TypeUUID)
	}
	if uru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userroles.UserTable,
			Columns: []string{userroles.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userroles.UserTable,
			Columns: []string{userroles.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uru.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userroles.RoleTable,
			Columns: []string{userroles.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roles.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uru.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userroles.RoleTable,
			Columns: []string{userroles.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roles.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userroles.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uru.mutation.done = true
	return n, nil
}

// UserRolesUpdateOne is the builder for updating a single UserRoles entity.
type UserRolesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserRolesMutation
}

// SetUserID sets the "user_id" field.
func (uruo *UserRolesUpdateOne) SetUserID(u uuid.UUID) *UserRolesUpdateOne {
	uruo.mutation.SetUserID(u)
	return uruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uruo *UserRolesUpdateOne) SetNillableUserID(u *uuid.UUID) *UserRolesUpdateOne {
	if u != nil {
		uruo.SetUserID(*u)
	}
	return uruo
}

// SetRoleID sets the "role_id" field.
func (uruo *UserRolesUpdateOne) SetRoleID(i int) *UserRolesUpdateOne {
	uruo.mutation.SetRoleID(i)
	return uruo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (uruo *UserRolesUpdateOne) SetNillableRoleID(i *int) *UserRolesUpdateOne {
	if i != nil {
		uruo.SetRoleID(*i)
	}
	return uruo
}

// SetAssignedBy sets the "assigned_by" field.
func (uruo *UserRolesUpdateOne) SetAssignedBy(u uuid.UUID) *UserRolesUpdateOne {
	uruo.mutation.SetAssignedBy(u)
	return uruo
}

// SetNillableAssignedBy sets the "assigned_by" field if the given value is not nil.
func (uruo *UserRolesUpdateOne) SetNillableAssignedBy(u *uuid.UUID) *UserRolesUpdateOne {
	if u != nil {
		uruo.SetAssignedBy(*u)
	}
	return uruo
}

// ClearAssignedBy clears the value of the "assigned_by" field.
func (uruo *UserRolesUpdateOne) ClearAssignedBy() *UserRolesUpdateOne {
	uruo.mutation.ClearAssignedBy()
	return uruo
}

// SetUser sets the "user" edge to the Users entity.
func (uruo *UserRolesUpdateOne) SetUser(u *Users) *UserRolesUpdateOne {
	return uruo.SetUserID(u.ID)
}

// SetRole sets the "role" edge to the Roles entity.
func (uruo *UserRolesUpdateOne) SetRole(r *Roles) *UserRolesUpdateOne {
	return uruo.SetRoleID(r.ID)
}

// Mutation returns the UserRolesMutation object of the builder.
func (uruo *UserRolesUpdateOne) Mutation() *UserRolesMutation {
	return uruo.mutation
}

// ClearUser clears the "user" edge to the Users entity.
func (uruo *UserRolesUpdateOne) ClearUser() *UserRolesUpdateOne {
	uruo.mutation.ClearUser()
	return uruo
}

// ClearRole clears the "role" edge to the Roles entity.
func (uruo *UserRolesUpdateOne) ClearRole() *UserRolesUpdateOne {
	uruo.mutation.ClearRole()
	return uruo
}

// Where appends a list predicates to the UserRolesUpdate builder.
func (uruo *UserRolesUpdateOne) Where(ps ...predicate.UserRoles) *UserRolesUpdateOne {
	uruo.mutation.Where(ps...)
	return uruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uruo *UserRolesUpdateOne) Select(field string, fields ...string) *UserRolesUpdateOne {
	uruo.fields = append([]string{field}, fields...)
	return uruo
}

// Save executes the query and returns the updated UserRoles entity.
func (uruo *UserRolesUpdateOne) Save(ctx context.Context) (*UserRoles, error) {
	return withHooks(ctx, uruo.sqlSave, uruo.mutation, uruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uruo *UserRolesUpdateOne) SaveX(ctx context.Context) *UserRoles {
	node, err := uruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uruo *UserRolesUpdateOne) Exec(ctx context.Context) error {
	_, err := uruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uruo *UserRolesUpdateOne) ExecX(ctx context.Context) {
	if err := uruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uruo *UserRolesUpdateOne) check() error {
	if _, ok := uruo.mutation.UserID(); uruo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserRoles.user"`)
	}
	if _, ok := uruo.mutation.RoleID(); uruo.mutation.RoleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserRoles.role"`)
	}
	return nil
}

func (uruo *UserRolesUpdateOne) sqlSave(ctx context.Context) (_node *UserRoles, err error) {
	if err := uruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userroles.Table, userroles.Columns, sqlgraph.NewFieldSpec(userroles.FieldID, field.TypeUUID))
	id, ok := uruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserRoles.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userroles.FieldID)
		for _, f := range fields {
			if !userroles.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userroles.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uruo.mutation.AssignedBy(); ok {
		_spec.SetField(userroles.FieldAssignedBy, field.TypeUUID, value)
	}
	if uruo.mutation.AssignedByCleared() {
		_spec.ClearField(userroles.FieldAssignedBy, field.TypeUUID)
	}
	if uruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userroles.UserTable,
			Columns: []string{userroles.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userroles.UserTable,
			Columns: []string{userroles.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uruo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userroles.RoleTable,
			Columns: []string{userroles.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roles.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uruo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userroles.RoleTable,
			Columns: []string{userroles.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roles.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserRoles{config: uruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userroles.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uruo.mutation.done = true
	return _node, nil
}
