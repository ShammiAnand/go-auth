// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shammianand/go-auth/ent/permissions"
	"github.com/shammianand/go-auth/ent/rolepermissions"
	"github.com/shammianand/go-auth/ent/roles"
)

// RolePermissions is the model entity for the RolePermissions schema.
type RolePermissions struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID int `json:"role_id,omitempty"`
	// PermissionID holds the value of the "permission_id" field.
	PermissionID int `json:"permission_id,omitempty"`
	// AssignedAt holds the value of the "assigned_at" field.
	AssignedAt time.Time `json:"assigned_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RolePermissionsQuery when eager-loading is set.
	Edges        RolePermissionsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RolePermissionsEdges holds the relations/edges for other nodes in the graph.
type RolePermissionsEdges struct {
	// Role holds the value of the role edge.
	Role *Roles `json:"role,omitempty"`
	// Permission holds the value of the permission edge.
	Permission *Permissions `json:"permission,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RolePermissionsEdges) RoleOrErr() (*Roles, error) {
	if e.Role != nil {
		return e.Role, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: roles.Label}
	}
	return nil, &NotLoadedError{edge: "role"}
}

// PermissionOrErr returns the Permission value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RolePermissionsEdges) PermissionOrErr() (*Permissions, error) {
	if e.Permission != nil {
		return e.Permission, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: permissions.Label}
	}
	return nil, &NotLoadedError{edge: "permission"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RolePermissions) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rolepermissions.FieldID, rolepermissions.FieldRoleID, rolepermissions.FieldPermissionID:
			values[i] = new(sql.NullInt64)
		case rolepermissions.FieldAssignedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RolePermissions fields.
func (rp *RolePermissions) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rolepermissions.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rp.ID = int(value.Int64)
		case rolepermissions.FieldRoleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				rp.RoleID = int(value.Int64)
			}
		case rolepermissions.FieldPermissionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field permission_id", values[i])
			} else if value.Valid {
				rp.PermissionID = int(value.Int64)
			}
		case rolepermissions.FieldAssignedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field assigned_at", values[i])
			} else if value.Valid {
				rp.AssignedAt = value.Time
			}
		default:
			rp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RolePermissions.
// This includes values selected through modifiers, order, etc.
func (rp *RolePermissions) Value(name string) (ent.Value, error) {
	return rp.selectValues.Get(name)
}

// QueryRole queries the "role" edge of the RolePermissions entity.
func (rp *RolePermissions) QueryRole() *RolesQuery {
	return NewRolePermissionsClient(rp.config).QueryRole(rp)
}

// QueryPermission queries the "permission" edge of the RolePermissions entity.
func (rp *RolePermissions) QueryPermission() *PermissionsQuery {
	return NewRolePermissionsClient(rp.config).QueryPermission(rp)
}

// Update returns a builder for updating this RolePermissions.
// Note that you need to call RolePermissions.Unwrap() before calling this method if this RolePermissions
// was returned from a transaction, and the transaction was committed or rolled back.
func (rp *RolePermissions) Update() *RolePermissionsUpdateOne {
	return NewRolePermissionsClient(rp.config).UpdateOne(rp)
}

// Unwrap unwraps the RolePermissions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rp *RolePermissions) Unwrap() *RolePermissions {
	_tx, ok := rp.config.driver.(*txDriver)
	if !ok {
		panic("ent: RolePermissions is not a transactional entity")
	}
	rp.config.driver = _tx.drv
	return rp
}

// String implements the fmt.Stringer.
func (rp *RolePermissions) String() string {
	var builder strings.Builder
	builder.WriteString("RolePermissions(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rp.ID))
	builder.WriteString("role_id=")
	builder.WriteString(fmt.Sprintf("%v", rp.RoleID))
	builder.WriteString(", ")
	builder.WriteString("permission_id=")
	builder.WriteString(fmt.Sprintf("%v", rp.PermissionID))
	builder.WriteString(", ")
	builder.WriteString("assigned_at=")
	builder.WriteString(rp.AssignedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RolePermissionsSlice is a parsable slice of RolePermissions.
type RolePermissionsSlice []*RolePermissions
