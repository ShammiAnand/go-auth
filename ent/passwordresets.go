// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shammianand/go-auth/ent/passwordresets"
)

// PasswordResets is the model entity for the PasswordResets schema.
type PasswordResets struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// User requesting password reset
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// When this token expires
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// IsUsed holds the value of the "is_used" field.
	IsUsed bool `json:"is_used,omitempty"`
	// UsedAt holds the value of the "used_at" field.
	UsedAt *time.Time `json:"used_at,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PasswordResets) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case passwordresets.FieldIsUsed:
			values[i] = new(sql.NullBool)
		case passwordresets.FieldEmail, passwordresets.FieldToken, passwordresets.FieldIPAddress:
			values[i] = new(sql.NullString)
		case passwordresets.FieldExpiresAt, passwordresets.FieldUsedAt, passwordresets.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case passwordresets.FieldID, passwordresets.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PasswordResets fields.
func (pr *PasswordResets) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case passwordresets.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pr.ID = *value
			}
		case passwordresets.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				pr.UserID = *value
			}
		case passwordresets.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				pr.Email = value.String
			}
		case passwordresets.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				pr.Token = value.String
			}
		case passwordresets.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				pr.ExpiresAt = value.Time
			}
		case passwordresets.FieldIsUsed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_used", values[i])
			} else if value.Valid {
				pr.IsUsed = value.Bool
			}
		case passwordresets.FieldUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field used_at", values[i])
			} else if value.Valid {
				pr.UsedAt = new(time.Time)
				*pr.UsedAt = value.Time
			}
		case passwordresets.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				pr.IPAddress = value.String
			}
		case passwordresets.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PasswordResets.
// This includes values selected through modifiers, order, etc.
func (pr *PasswordResets) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// Update returns a builder for updating this PasswordResets.
// Note that you need to call PasswordResets.Unwrap() before calling this method if this PasswordResets
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *PasswordResets) Update() *PasswordResetsUpdateOne {
	return NewPasswordResetsClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the PasswordResets entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *PasswordResets) Unwrap() *PasswordResets {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: PasswordResets is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *PasswordResets) String() string {
	var builder strings.Builder
	builder.WriteString("PasswordResets(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.UserID))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(pr.Email)
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(pr.Token)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(pr.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_used=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsUsed))
	builder.WriteString(", ")
	if v := pr.UsedAt; v != nil {
		builder.WriteString("used_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(pr.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PasswordResetsSlice is a parsable slice of PasswordResets.
type PasswordResetsSlice []*PasswordResets
