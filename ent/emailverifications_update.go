// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shammianand/go-auth/ent/emailverifications"
	"github.com/shammianand/go-auth/ent/predicate"
)

// EmailVerificationsUpdate is the builder for updating EmailVerifications entities.
type EmailVerificationsUpdate struct {
	config
	hooks    []Hook
	mutation *EmailVerificationsMutation
}

// Where appends a list predicates to the EmailVerificationsUpdate builder.
func (evu *EmailVerificationsUpdate) Where(ps ...predicate.EmailVerifications) *EmailVerificationsUpdate {
	evu.mutation.Where(ps...)
	return evu
}

// SetUserID sets the "user_id" field.
func (evu *EmailVerificationsUpdate) SetUserID(u uuid.UUID) *EmailVerificationsUpdate {
	evu.mutation.SetUserID(u)
	return evu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (evu *EmailVerificationsUpdate) SetNillableUserID(u *uuid.UUID) *EmailVerificationsUpdate {
	if u != nil {
		evu.SetUserID(*u)
	}
	return evu
}

// SetEmail sets the "email" field.
func (evu *EmailVerificationsUpdate) SetEmail(s string) *EmailVerificationsUpdate {
	evu.mutation.SetEmail(s)
	return evu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (evu *EmailVerificationsUpdate) SetNillableEmail(s *string) *EmailVerificationsUpdate {
	if s != nil {
		evu.SetEmail(*s)
	}
	return evu
}

// SetToken sets the "token" field.
func (evu *EmailVerificationsUpdate) SetToken(s string) *EmailVerificationsUpdate {
	evu.mutation.SetToken(s)
	return evu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (evu *EmailVerificationsUpdate) SetNillableToken(s *string) *EmailVerificationsUpdate {
	if s != nil {
		evu.SetToken(*s)
	}
	return evu
}

// SetExpiresAt sets the "expires_at" field.
func (evu *EmailVerificationsUpdate) SetExpiresAt(t time.Time) *EmailVerificationsUpdate {
	evu.mutation.SetExpiresAt(t)
	return evu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (evu *EmailVerificationsUpdate) SetNillableExpiresAt(t *time.Time) *EmailVerificationsUpdate {
	if t != nil {
		evu.SetExpiresAt(*t)
	}
	return evu
}

// SetIsUsed sets the "is_used" field.
func (evu *EmailVerificationsUpdate) SetIsUsed(b bool) *EmailVerificationsUpdate {
	evu.mutation.SetIsUsed(b)
	return evu
}

// SetNillableIsUsed sets the "is_used" field if the given value is not nil.
func (evu *EmailVerificationsUpdate) SetNillableIsUsed(b *bool) *EmailVerificationsUpdate {
	if b != nil {
		evu.SetIsUsed(*b)
	}
	return evu
}

// SetUsedAt sets the "used_at" field.
func (evu *EmailVerificationsUpdate) SetUsedAt(t time.Time) *EmailVerificationsUpdate {
	evu.mutation.SetUsedAt(t)
	return evu
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (evu *EmailVerificationsUpdate) SetNillableUsedAt(t *time.Time) *EmailVerificationsUpdate {
	if t != nil {
		evu.SetUsedAt(*t)
	}
	return evu
}

// ClearUsedAt clears the value of the "used_at" field.
func (evu *EmailVerificationsUpdate) ClearUsedAt() *EmailVerificationsUpdate {
	evu.mutation.ClearUsedAt()
	return evu
}

// SetIPAddress sets the "ip_address" field.
func (evu *EmailVerificationsUpdate) SetIPAddress(s string) *EmailVerificationsUpdate {
	evu.mutation.SetIPAddress(s)
	return evu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (evu *EmailVerificationsUpdate) SetNillableIPAddress(s *string) *EmailVerificationsUpdate {
	if s != nil {
		evu.SetIPAddress(*s)
	}
	return evu
}

// ClearIPAddress clears the value of the "ip_address" field.
func (evu *EmailVerificationsUpdate) ClearIPAddress() *EmailVerificationsUpdate {
	evu.mutation.ClearIPAddress()
	return evu
}

// Mutation returns the EmailVerificationsMutation object of the builder.
func (evu *EmailVerificationsUpdate) Mutation() *EmailVerificationsMutation {
	return evu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (evu *EmailVerificationsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, evu.sqlSave, evu.mutation, evu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (evu *EmailVerificationsUpdate) SaveX(ctx context.Context) int {
	affected, err := evu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (evu *EmailVerificationsUpdate) Exec(ctx context.Context) error {
	_, err := evu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (evu *EmailVerificationsUpdate) ExecX(ctx context.Context) {
	if err := evu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (evu *EmailVerificationsUpdate) check() error {
	if v, ok := evu.mutation.Email(); ok {
		if err := emailverifications.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "EmailVerifications.email": %w`, err)}
		}
	}
	if v, ok := evu.mutation.Token(); ok {
		if err := emailverifications.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "EmailVerifications.token": %w`, err)}
		}
	}
	return nil
}

func (evu *EmailVerificationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := evu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(emailverifications.Table, emailverifications.Columns, sqlgraph.NewFieldSpec(emailverifications.FieldID, field.TypeUUID))
	if ps := evu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := evu.mutation.UserID(); ok {
		_spec.SetField(emailverifications.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := evu.mutation.Email(); ok {
		_spec.SetField(emailverifications.FieldEmail, field.TypeString, value)
	}
	if value, ok := evu.mutation.Token(); ok {
		_spec.SetField(emailverifications.FieldToken, field.TypeString, value)
	}
	if value, ok := evu.mutation.ExpiresAt(); ok {
		_spec.SetField(emailverifications.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := evu.mutation.IsUsed(); ok {
		_spec.SetField(emailverifications.FieldIsUsed, field.TypeBool, value)
	}
	if value, ok := evu.mutation.UsedAt(); ok {
		_spec.SetField(emailverifications.FieldUsedAt, field.TypeTime, value)
	}
	if evu.mutation.UsedAtCleared() {
		_spec.ClearField(emailverifications.FieldUsedAt, field.TypeTime)
	}
	if value, ok := evu.mutation.IPAddress(); ok {
		_spec.SetField(emailverifications.FieldIPAddress, field.TypeString, value)
	}
	if evu.mutation.IPAddressCleared() {
		_spec.ClearField(emailverifications.FieldIPAddress, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, evu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailverifications.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	evu.mutation.done = true
	return n, nil
}

// EmailVerificationsUpdateOne is the builder for updating a single EmailVerifications entity.
type EmailVerificationsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmailVerificationsMutation
}

// SetUserID sets the "user_id" field.
func (evuo *EmailVerificationsUpdateOne) SetUserID(u uuid.UUID) *EmailVerificationsUpdateOne {
	evuo.mutation.SetUserID(u)
	return evuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (evuo *EmailVerificationsUpdateOne) SetNillableUserID(u *uuid.UUID) *EmailVerificationsUpdateOne {
	if u != nil {
		evuo.SetUserID(*u)
	}
	return evuo
}

// SetEmail sets the "email" field.
func (evuo *EmailVerificationsUpdateOne) SetEmail(s string) *EmailVerificationsUpdateOne {
	evuo.mutation.SetEmail(s)
	return evuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (evuo *EmailVerificationsUpdateOne) SetNillableEmail(s *string) *EmailVerificationsUpdateOne {
	if s != nil {
		evuo.SetEmail(*s)
	}
	return evuo
}

// SetToken sets the "token" field.
func (evuo *EmailVerificationsUpdateOne) SetToken(s string) *EmailVerificationsUpdateOne {
	evuo.mutation.SetToken(s)
	return evuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (evuo *EmailVerificationsUpdateOne) SetNillableToken(s *string) *EmailVerificationsUpdateOne {
	if s != nil {
		evuo.SetToken(*s)
	}
	return evuo
}

// SetExpiresAt sets the "expires_at" field.
func (evuo *EmailVerificationsUpdateOne) SetExpiresAt(t time.Time) *EmailVerificationsUpdateOne {
	evuo.mutation.SetExpiresAt(t)
	return evuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (evuo *EmailVerificationsUpdateOne) SetNillableExpiresAt(t *time.Time) *EmailVerificationsUpdateOne {
	if t != nil {
		evuo.SetExpiresAt(*t)
	}
	return evuo
}

// SetIsUsed sets the "is_used" field.
func (evuo *EmailVerificationsUpdateOne) SetIsUsed(b bool) *EmailVerificationsUpdateOne {
	evuo.mutation.SetIsUsed(b)
	return evuo
}

// SetNillableIsUsed sets the "is_used" field if the given value is not nil.
func (evuo *EmailVerificationsUpdateOne) SetNillableIsUsed(b *bool) *EmailVerificationsUpdateOne {
	if b != nil {
		evuo.SetIsUsed(*b)
	}
	return evuo
}

// SetUsedAt sets the "used_at" field.
func (evuo *EmailVerificationsUpdateOne) SetUsedAt(t time.Time) *EmailVerificationsUpdateOne {
	evuo.mutation.SetUsedAt(t)
	return evuo
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (evuo *EmailVerificationsUpdateOne) SetNillableUsedAt(t *time.Time) *EmailVerificationsUpdateOne {
	if t != nil {
		evuo.SetUsedAt(*t)
	}
	return evuo
}

// ClearUsedAt clears the value of the "used_at" field.
func (evuo *EmailVerificationsUpdateOne) ClearUsedAt() *EmailVerificationsUpdateOne {
	evuo.mutation.ClearUsedAt()
	return evuo
}

// SetIPAddress sets the "ip_address" field.
func (evuo *EmailVerificationsUpdateOne) SetIPAddress(s string) *EmailVerificationsUpdateOne {
	evuo.mutation.SetIPAddress(s)
	return evuo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (evuo *EmailVerificationsUpdateOne) SetNillableIPAddress(s *string) *EmailVerificationsUpdateOne {
	if s != nil {
		evuo.SetIPAddress(*s)
	}
	return evuo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (evuo *EmailVerificationsUpdateOne) ClearIPAddress() *EmailVerificationsUpdateOne {
	evuo.mutation.ClearIPAddress()
	return evuo
}

// Mutation returns the EmailVerificationsMutation object of the builder.
func (evuo *EmailVerificationsUpdateOne) Mutation() *EmailVerificationsMutation {
	return evuo.mutation
}

// Where appends a list predicates to the EmailVerificationsUpdate builder.
func (evuo *EmailVerificationsUpdateOne) Where(ps ...predicate.EmailVerifications) *EmailVerificationsUpdateOne {
	evuo.mutation.Where(ps...)
	return evuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (evuo *EmailVerificationsUpdateOne) Select(field string, fields ...string) *EmailVerificationsUpdateOne {
	evuo.fields = append([]string{field}, fields...)
	return evuo
}

// Save executes the query and returns the updated EmailVerifications entity.
func (evuo *EmailVerificationsUpdateOne) Save(ctx context.Context) (*EmailVerifications, error) {
	return withHooks(ctx, evuo.sqlSave, evuo.mutation, evuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (evuo *EmailVerificationsUpdateOne) SaveX(ctx context.Context) *EmailVerifications {
	node, err := evuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (evuo *EmailVerificationsUpdateOne) Exec(ctx context.Context) error {
	_, err := evuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (evuo *EmailVerificationsUpdateOne) ExecX(ctx context.Context) {
	if err := evuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (evuo *EmailVerificationsUpdateOne) check() error {
	if v, ok := evuo.mutation.Email(); ok {
		if err := emailverifications.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "EmailVerifications.email": %w`, err)}
		}
	}
	if v, ok := evuo.mutation.Token(); ok {
		if err := emailverifications.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "EmailVerifications.token": %w`, err)}
		}
	}
	return nil
}

func (evuo *EmailVerificationsUpdateOne) sqlSave(ctx context.Context) (_node *EmailVerifications, err error) {
	if err := evuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(emailverifications.Table, emailverifications.Columns, sqlgraph.NewFieldSpec(emailverifications.FieldID, field.TypeUUID))
	id, ok := evuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmailVerifications.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := evuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emailverifications.FieldID)
		for _, f := range fields {
			if !emailverifications.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != emailverifications.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := evuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := evuo.mutation.UserID(); ok {
		_spec.SetField(emailverifications.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := evuo.mutation.Email(); ok {
		_spec.SetField(emailverifications.FieldEmail, field.TypeString, value)
	}
	if value, ok := evuo.mutation.Token(); ok {
		_spec.SetField(emailverifications.FieldToken, field.TypeString, value)
	}
	if value, ok := evuo.mutation.ExpiresAt(); ok {
		_spec.SetField(emailverifications.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := evuo.mutation.IsUsed(); ok {
		_spec.SetField(emailverifications.FieldIsUsed, field.TypeBool, value)
	}
	if value, ok := evuo.mutation.UsedAt(); ok {
		_spec.SetField(emailverifications.FieldUsedAt, field.TypeTime, value)
	}
	if evuo.mutation.UsedAtCleared() {
		_spec.ClearField(emailverifications.FieldUsedAt, field.TypeTime)
	}
	if value, ok := evuo.mutation.IPAddress(); ok {
		_spec.SetField(emailverifications.FieldIPAddress, field.TypeString, value)
	}
	if evuo.mutation.IPAddressCleared() {
		_spec.ClearField(emailverifications.FieldIPAddress, field.TypeString)
	}
	_node = &EmailVerifications{config: evuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, evuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailverifications.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	evuo.mutation.done = true
	return _node, nil
}
