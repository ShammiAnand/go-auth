// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shammianand/go-auth/ent/emaillogs"
)

// EmailLogsCreate is the builder for creating a EmailLogs entity.
type EmailLogsCreate struct {
	config
	mutation *EmailLogsMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (elc *EmailLogsCreate) SetUserID(u uuid.UUID) *EmailLogsCreate {
	elc.mutation.SetUserID(u)
	return elc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (elc *EmailLogsCreate) SetNillableUserID(u *uuid.UUID) *EmailLogsCreate {
	if u != nil {
		elc.SetUserID(*u)
	}
	return elc
}

// SetRecipient sets the "recipient" field.
func (elc *EmailLogsCreate) SetRecipient(s string) *EmailLogsCreate {
	elc.mutation.SetRecipient(s)
	return elc
}

// SetEmailType sets the "email_type" field.
func (elc *EmailLogsCreate) SetEmailType(s string) *EmailLogsCreate {
	elc.mutation.SetEmailType(s)
	return elc
}

// SetSubject sets the "subject" field.
func (elc *EmailLogsCreate) SetSubject(s string) *EmailLogsCreate {
	elc.mutation.SetSubject(s)
	return elc
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (elc *EmailLogsCreate) SetNillableSubject(s *string) *EmailLogsCreate {
	if s != nil {
		elc.SetSubject(*s)
	}
	return elc
}

// SetStatus sets the "status" field.
func (elc *EmailLogsCreate) SetStatus(s string) *EmailLogsCreate {
	elc.mutation.SetStatus(s)
	return elc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (elc *EmailLogsCreate) SetNillableStatus(s *string) *EmailLogsCreate {
	if s != nil {
		elc.SetStatus(*s)
	}
	return elc
}

// SetProvider sets the "provider" field.
func (elc *EmailLogsCreate) SetProvider(s string) *EmailLogsCreate {
	elc.mutation.SetProvider(s)
	return elc
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (elc *EmailLogsCreate) SetNillableProvider(s *string) *EmailLogsCreate {
	if s != nil {
		elc.SetProvider(*s)
	}
	return elc
}

// SetProviderMessageID sets the "provider_message_id" field.
func (elc *EmailLogsCreate) SetProviderMessageID(s string) *EmailLogsCreate {
	elc.mutation.SetProviderMessageID(s)
	return elc
}

// SetNillableProviderMessageID sets the "provider_message_id" field if the given value is not nil.
func (elc *EmailLogsCreate) SetNillableProviderMessageID(s *string) *EmailLogsCreate {
	if s != nil {
		elc.SetProviderMessageID(*s)
	}
	return elc
}

// SetMetadata sets the "metadata" field.
func (elc *EmailLogsCreate) SetMetadata(m map[string]interface{}) *EmailLogsCreate {
	elc.mutation.SetMetadata(m)
	return elc
}

// SetErrorMessage sets the "error_message" field.
func (elc *EmailLogsCreate) SetErrorMessage(s string) *EmailLogsCreate {
	elc.mutation.SetErrorMessage(s)
	return elc
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (elc *EmailLogsCreate) SetNillableErrorMessage(s *string) *EmailLogsCreate {
	if s != nil {
		elc.SetErrorMessage(*s)
	}
	return elc
}

// SetSentAt sets the "sent_at" field.
func (elc *EmailLogsCreate) SetSentAt(t time.Time) *EmailLogsCreate {
	elc.mutation.SetSentAt(t)
	return elc
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (elc *EmailLogsCreate) SetNillableSentAt(t *time.Time) *EmailLogsCreate {
	if t != nil {
		elc.SetSentAt(*t)
	}
	return elc
}

// SetDeliveredAt sets the "delivered_at" field.
func (elc *EmailLogsCreate) SetDeliveredAt(t time.Time) *EmailLogsCreate {
	elc.mutation.SetDeliveredAt(t)
	return elc
}

// SetNillableDeliveredAt sets the "delivered_at" field if the given value is not nil.
func (elc *EmailLogsCreate) SetNillableDeliveredAt(t *time.Time) *EmailLogsCreate {
	if t != nil {
		elc.SetDeliveredAt(*t)
	}
	return elc
}

// SetID sets the "id" field.
func (elc *EmailLogsCreate) SetID(u uuid.UUID) *EmailLogsCreate {
	elc.mutation.SetID(u)
	return elc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (elc *EmailLogsCreate) SetNillableID(u *uuid.UUID) *EmailLogsCreate {
	if u != nil {
		elc.SetID(*u)
	}
	return elc
}

// Mutation returns the EmailLogsMutation object of the builder.
func (elc *EmailLogsCreate) Mutation() *EmailLogsMutation {
	return elc.mutation
}

// Save creates the EmailLogs in the database.
func (elc *EmailLogsCreate) Save(ctx context.Context) (*EmailLogs, error) {
	elc.defaults()
	return withHooks(ctx, elc.sqlSave, elc.mutation, elc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (elc *EmailLogsCreate) SaveX(ctx context.Context) *EmailLogs {
	v, err := elc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elc *EmailLogsCreate) Exec(ctx context.Context) error {
	_, err := elc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elc *EmailLogsCreate) ExecX(ctx context.Context) {
	if err := elc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (elc *EmailLogsCreate) defaults() {
	if _, ok := elc.mutation.Status(); !ok {
		v := emaillogs.DefaultStatus
		elc.mutation.SetStatus(v)
	}
	if _, ok := elc.mutation.Provider(); !ok {
		v := emaillogs.DefaultProvider
		elc.mutation.SetProvider(v)
	}
	if _, ok := elc.mutation.SentAt(); !ok {
		v := emaillogs.DefaultSentAt()
		elc.mutation.SetSentAt(v)
	}
	if _, ok := elc.mutation.ID(); !ok {
		v := emaillogs.DefaultID()
		elc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (elc *EmailLogsCreate) check() error {
	if _, ok := elc.mutation.Recipient(); !ok {
		return &ValidationError{Name: "recipient", err: errors.New(`ent: missing required field "EmailLogs.recipient"`)}
	}
	if v, ok := elc.mutation.Recipient(); ok {
		if err := emaillogs.RecipientValidator(v); err != nil {
			return &ValidationError{Name: "recipient", err: fmt.Errorf(`ent: validator failed for field "EmailLogs.recipient": %w`, err)}
		}
	}
	if _, ok := elc.mutation.EmailType(); !ok {
		return &ValidationError{Name: "email_type", err: errors.New(`ent: missing required field "EmailLogs.email_type"`)}
	}
	if v, ok := elc.mutation.EmailType(); ok {
		if err := emaillogs.EmailTypeValidator(v); err != nil {
			return &ValidationError{Name: "email_type", err: fmt.Errorf(`ent: validator failed for field "EmailLogs.email_type": %w`, err)}
		}
	}
	if _, ok := elc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "EmailLogs.status"`)}
	}
	if _, ok := elc.mutation.Provider(); !ok {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required field "EmailLogs.provider"`)}
	}
	if _, ok := elc.mutation.SentAt(); !ok {
		return &ValidationError{Name: "sent_at", err: errors.New(`ent: missing required field "EmailLogs.sent_at"`)}
	}
	return nil
}

func (elc *EmailLogsCreate) sqlSave(ctx context.Context) (*EmailLogs, error) {
	if err := elc.check(); err != nil {
		return nil, err
	}
	_node, _spec := elc.createSpec()
	if err := sqlgraph.CreateNode(ctx, elc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	elc.mutation.id = &_node.ID
	elc.mutation.done = true
	return _node, nil
}

func (elc *EmailLogsCreate) createSpec() (*EmailLogs, *sqlgraph.CreateSpec) {
	var (
		_node = &EmailLogs{config: elc.config}
		_spec = sqlgraph.NewCreateSpec(emaillogs.Table, sqlgraph.NewFieldSpec(emaillogs.FieldID, field.TypeUUID))
	)
	if id, ok := elc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := elc.mutation.UserID(); ok {
		_spec.SetField(emaillogs.FieldUserID, field.TypeUUID, value)
		_node.UserID = &value
	}
	if value, ok := elc.mutation.Recipient(); ok {
		_spec.SetField(emaillogs.FieldRecipient, field.TypeString, value)
		_node.Recipient = value
	}
	if value, ok := elc.mutation.EmailType(); ok {
		_spec.SetField(emaillogs.FieldEmailType, field.TypeString, value)
		_node.EmailType = value
	}
	if value, ok := elc.mutation.Subject(); ok {
		_spec.SetField(emaillogs.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := elc.mutation.Status(); ok {
		_spec.SetField(emaillogs.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := elc.mutation.Provider(); ok {
		_spec.SetField(emaillogs.FieldProvider, field.TypeString, value)
		_node.Provider = value
	}
	if value, ok := elc.mutation.ProviderMessageID(); ok {
		_spec.SetField(emaillogs.FieldProviderMessageID, field.TypeString, value)
		_node.ProviderMessageID = value
	}
	if value, ok := elc.mutation.Metadata(); ok {
		_spec.SetField(emaillogs.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := elc.mutation.ErrorMessage(); ok {
		_spec.SetField(emaillogs.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if value, ok := elc.mutation.SentAt(); ok {
		_spec.SetField(emaillogs.FieldSentAt, field.TypeTime, value)
		_node.SentAt = value
	}
	if value, ok := elc.mutation.DeliveredAt(); ok {
		_spec.SetField(emaillogs.FieldDeliveredAt, field.TypeTime, value)
		_node.DeliveredAt = &value
	}
	return _node, _spec
}

// EmailLogsCreateBulk is the builder for creating many EmailLogs entities in bulk.
type EmailLogsCreateBulk struct {
	config
	err      error
	builders []*EmailLogsCreate
}

// Save creates the EmailLogs entities in the database.
func (elcb *EmailLogsCreateBulk) Save(ctx context.Context) ([]*EmailLogs, error) {
	if elcb.err != nil {
		return nil, elcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(elcb.builders))
	nodes := make([]*EmailLogs, len(elcb.builders))
	mutators := make([]Mutator, len(elcb.builders))
	for i := range elcb.builders {
		func(i int, root context.Context) {
			builder := elcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmailLogsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, elcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, elcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, elcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (elcb *EmailLogsCreateBulk) SaveX(ctx context.Context) []*EmailLogs {
	v, err := elcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elcb *EmailLogsCreateBulk) Exec(ctx context.Context) error {
	_, err := elcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elcb *EmailLogsCreateBulk) ExecX(ctx context.Context) {
	if err := elcb.Exec(ctx); err != nil {
		panic(err)
	}
}
