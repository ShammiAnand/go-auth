// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shammianand/go-auth/ent/emailverifications"
)

// EmailVerificationsCreate is the builder for creating a EmailVerifications entity.
type EmailVerificationsCreate struct {
	config
	mutation *EmailVerificationsMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (evc *EmailVerificationsCreate) SetUserID(u uuid.UUID) *EmailVerificationsCreate {
	evc.mutation.SetUserID(u)
	return evc
}

// SetEmail sets the "email" field.
func (evc *EmailVerificationsCreate) SetEmail(s string) *EmailVerificationsCreate {
	evc.mutation.SetEmail(s)
	return evc
}

// SetToken sets the "token" field.
func (evc *EmailVerificationsCreate) SetToken(s string) *EmailVerificationsCreate {
	evc.mutation.SetToken(s)
	return evc
}

// SetExpiresAt sets the "expires_at" field.
func (evc *EmailVerificationsCreate) SetExpiresAt(t time.Time) *EmailVerificationsCreate {
	evc.mutation.SetExpiresAt(t)
	return evc
}

// SetIsUsed sets the "is_used" field.
func (evc *EmailVerificationsCreate) SetIsUsed(b bool) *EmailVerificationsCreate {
	evc.mutation.SetIsUsed(b)
	return evc
}

// SetNillableIsUsed sets the "is_used" field if the given value is not nil.
func (evc *EmailVerificationsCreate) SetNillableIsUsed(b *bool) *EmailVerificationsCreate {
	if b != nil {
		evc.SetIsUsed(*b)
	}
	return evc
}

// SetUsedAt sets the "used_at" field.
func (evc *EmailVerificationsCreate) SetUsedAt(t time.Time) *EmailVerificationsCreate {
	evc.mutation.SetUsedAt(t)
	return evc
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (evc *EmailVerificationsCreate) SetNillableUsedAt(t *time.Time) *EmailVerificationsCreate {
	if t != nil {
		evc.SetUsedAt(*t)
	}
	return evc
}

// SetIPAddress sets the "ip_address" field.
func (evc *EmailVerificationsCreate) SetIPAddress(s string) *EmailVerificationsCreate {
	evc.mutation.SetIPAddress(s)
	return evc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (evc *EmailVerificationsCreate) SetNillableIPAddress(s *string) *EmailVerificationsCreate {
	if s != nil {
		evc.SetIPAddress(*s)
	}
	return evc
}

// SetCreatedAt sets the "created_at" field.
func (evc *EmailVerificationsCreate) SetCreatedAt(t time.Time) *EmailVerificationsCreate {
	evc.mutation.SetCreatedAt(t)
	return evc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (evc *EmailVerificationsCreate) SetNillableCreatedAt(t *time.Time) *EmailVerificationsCreate {
	if t != nil {
		evc.SetCreatedAt(*t)
	}
	return evc
}

// SetID sets the "id" field.
func (evc *EmailVerificationsCreate) SetID(u uuid.UUID) *EmailVerificationsCreate {
	evc.mutation.SetID(u)
	return evc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (evc *EmailVerificationsCreate) SetNillableID(u *uuid.UUID) *EmailVerificationsCreate {
	if u != nil {
		evc.SetID(*u)
	}
	return evc
}

// Mutation returns the EmailVerificationsMutation object of the builder.
func (evc *EmailVerificationsCreate) Mutation() *EmailVerificationsMutation {
	return evc.mutation
}

// Save creates the EmailVerifications in the database.
func (evc *EmailVerificationsCreate) Save(ctx context.Context) (*EmailVerifications, error) {
	evc.defaults()
	return withHooks(ctx, evc.sqlSave, evc.mutation, evc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (evc *EmailVerificationsCreate) SaveX(ctx context.Context) *EmailVerifications {
	v, err := evc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (evc *EmailVerificationsCreate) Exec(ctx context.Context) error {
	_, err := evc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (evc *EmailVerificationsCreate) ExecX(ctx context.Context) {
	if err := evc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (evc *EmailVerificationsCreate) defaults() {
	if _, ok := evc.mutation.IsUsed(); !ok {
		v := emailverifications.DefaultIsUsed
		evc.mutation.SetIsUsed(v)
	}
	if _, ok := evc.mutation.CreatedAt(); !ok {
		v := emailverifications.DefaultCreatedAt()
		evc.mutation.SetCreatedAt(v)
	}
	if _, ok := evc.mutation.ID(); !ok {
		v := emailverifications.DefaultID()
		evc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (evc *EmailVerificationsCreate) check() error {
	if _, ok := evc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "EmailVerifications.user_id"`)}
	}
	if _, ok := evc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "EmailVerifications.email"`)}
	}
	if v, ok := evc.mutation.Email(); ok {
		if err := emailverifications.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "EmailVerifications.email": %w`, err)}
		}
	}
	if _, ok := evc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "EmailVerifications.token"`)}
	}
	if v, ok := evc.mutation.Token(); ok {
		if err := emailverifications.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "EmailVerifications.token": %w`, err)}
		}
	}
	if _, ok := evc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "EmailVerifications.expires_at"`)}
	}
	if _, ok := evc.mutation.IsUsed(); !ok {
		return &ValidationError{Name: "is_used", err: errors.New(`ent: missing required field "EmailVerifications.is_used"`)}
	}
	if _, ok := evc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EmailVerifications.created_at"`)}
	}
	return nil
}

func (evc *EmailVerificationsCreate) sqlSave(ctx context.Context) (*EmailVerifications, error) {
	if err := evc.check(); err != nil {
		return nil, err
	}
	_node, _spec := evc.createSpec()
	if err := sqlgraph.CreateNode(ctx, evc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	evc.mutation.id = &_node.ID
	evc.mutation.done = true
	return _node, nil
}

func (evc *EmailVerificationsCreate) createSpec() (*EmailVerifications, *sqlgraph.CreateSpec) {
	var (
		_node = &EmailVerifications{config: evc.config}
		_spec = sqlgraph.NewCreateSpec(emailverifications.Table, sqlgraph.NewFieldSpec(emailverifications.FieldID, field.TypeUUID))
	)
	if id, ok := evc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := evc.mutation.UserID(); ok {
		_spec.SetField(emailverifications.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := evc.mutation.Email(); ok {
		_spec.SetField(emailverifications.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := evc.mutation.Token(); ok {
		_spec.SetField(emailverifications.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := evc.mutation.ExpiresAt(); ok {
		_spec.SetField(emailverifications.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := evc.mutation.IsUsed(); ok {
		_spec.SetField(emailverifications.FieldIsUsed, field.TypeBool, value)
		_node.IsUsed = value
	}
	if value, ok := evc.mutation.UsedAt(); ok {
		_spec.SetField(emailverifications.FieldUsedAt, field.TypeTime, value)
		_node.UsedAt = &value
	}
	if value, ok := evc.mutation.IPAddress(); ok {
		_spec.SetField(emailverifications.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := evc.mutation.CreatedAt(); ok {
		_spec.SetField(emailverifications.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// EmailVerificationsCreateBulk is the builder for creating many EmailVerifications entities in bulk.
type EmailVerificationsCreateBulk struct {
	config
	err      error
	builders []*EmailVerificationsCreate
}

// Save creates the EmailVerifications entities in the database.
func (evcb *EmailVerificationsCreateBulk) Save(ctx context.Context) ([]*EmailVerifications, error) {
	if evcb.err != nil {
		return nil, evcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(evcb.builders))
	nodes := make([]*EmailVerifications, len(evcb.builders))
	mutators := make([]Mutator, len(evcb.builders))
	for i := range evcb.builders {
		func(i int, root context.Context) {
			builder := evcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmailVerificationsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, evcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, evcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, evcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (evcb *EmailVerificationsCreateBulk) SaveX(ctx context.Context) []*EmailVerifications {
	v, err := evcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (evcb *EmailVerificationsCreateBulk) Exec(ctx context.Context) error {
	_, err := evcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (evcb *EmailVerificationsCreateBulk) ExecX(ctx context.Context) {
	if err := evcb.Exec(ctx); err != nil {
		panic(err)
	}
}
