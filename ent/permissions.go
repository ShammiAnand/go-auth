// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shammianand/go-auth/ent/permissions"
)

// Permissions is the model entity for the Permissions schema.
type Permissions struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Unique code identifier (e.g., users.read, rbac.write)
	Code string `json:"code,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Resource this permission applies to (e.g., users, roles)
	Resource string `json:"resource,omitempty"`
	// Action this permission allows (e.g., read, write, delete)
	Action string `json:"action,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PermissionsQuery when eager-loading is set.
	Edges        PermissionsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PermissionsEdges holds the relations/edges for other nodes in the graph.
type PermissionsEdges struct {
	// RolePermissions holds the value of the role_permissions edge.
	RolePermissions []*RolePermissions `json:"role_permissions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RolePermissionsOrErr returns the RolePermissions value or an error if the edge
// was not loaded in eager-loading.
func (e PermissionsEdges) RolePermissionsOrErr() ([]*RolePermissions, error) {
	if e.loadedTypes[0] {
		return e.RolePermissions, nil
	}
	return nil, &NotLoadedError{edge: "role_permissions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Permissions) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case permissions.FieldID:
			values[i] = new(sql.NullInt64)
		case permissions.FieldCode, permissions.FieldName, permissions.FieldDescription, permissions.FieldResource, permissions.FieldAction:
			values[i] = new(sql.NullString)
		case permissions.FieldCreatedAt, permissions.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Permissions fields.
func (pe *Permissions) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case permissions.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pe.ID = int(value.Int64)
		case permissions.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				pe.Code = value.String
			}
		case permissions.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pe.Name = value.String
			}
		case permissions.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pe.Description = value.String
			}
		case permissions.FieldResource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource", values[i])
			} else if value.Valid {
				pe.Resource = value.String
			}
		case permissions.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				pe.Action = value.String
			}
		case permissions.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pe.CreatedAt = value.Time
			}
		case permissions.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pe.UpdatedAt = value.Time
			}
		default:
			pe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Permissions.
// This includes values selected through modifiers, order, etc.
func (pe *Permissions) Value(name string) (ent.Value, error) {
	return pe.selectValues.Get(name)
}

// QueryRolePermissions queries the "role_permissions" edge of the Permissions entity.
func (pe *Permissions) QueryRolePermissions() *RolePermissionsQuery {
	return NewPermissionsClient(pe.config).QueryRolePermissions(pe)
}

// Update returns a builder for updating this Permissions.
// Note that you need to call Permissions.Unwrap() before calling this method if this Permissions
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Permissions) Update() *PermissionsUpdateOne {
	return NewPermissionsClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the Permissions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *Permissions) Unwrap() *Permissions {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Permissions is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Permissions) String() string {
	var builder strings.Builder
	builder.WriteString("Permissions(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	builder.WriteString("code=")
	builder.WriteString(pe.Code)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pe.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pe.Description)
	builder.WriteString(", ")
	builder.WriteString("resource=")
	builder.WriteString(pe.Resource)
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(pe.Action)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pe.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pe.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PermissionsSlice is a parsable slice of Permissions.
type PermissionsSlice []*Permissions
