// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shammianand/go-auth/ent/auditlogs"
	"github.com/shammianand/go-auth/ent/predicate"
)

// AuditLogsUpdate is the builder for updating AuditLogs entities.
type AuditLogsUpdate struct {
	config
	hooks    []Hook
	mutation *AuditLogsMutation
}

// Where appends a list predicates to the AuditLogsUpdate builder.
func (alu *AuditLogsUpdate) Where(ps ...predicate.AuditLogs) *AuditLogsUpdate {
	alu.mutation.Where(ps...)
	return alu
}

// SetActorID sets the "actor_id" field.
func (alu *AuditLogsUpdate) SetActorID(u uuid.UUID) *AuditLogsUpdate {
	alu.mutation.SetActorID(u)
	return alu
}

// SetNillableActorID sets the "actor_id" field if the given value is not nil.
func (alu *AuditLogsUpdate) SetNillableActorID(u *uuid.UUID) *AuditLogsUpdate {
	if u != nil {
		alu.SetActorID(*u)
	}
	return alu
}

// ClearActorID clears the value of the "actor_id" field.
func (alu *AuditLogsUpdate) ClearActorID() *AuditLogsUpdate {
	alu.mutation.ClearActorID()
	return alu
}

// SetActionType sets the "action_type" field.
func (alu *AuditLogsUpdate) SetActionType(s string) *AuditLogsUpdate {
	alu.mutation.SetActionType(s)
	return alu
}

// SetNillableActionType sets the "action_type" field if the given value is not nil.
func (alu *AuditLogsUpdate) SetNillableActionType(s *string) *AuditLogsUpdate {
	if s != nil {
		alu.SetActionType(*s)
	}
	return alu
}

// SetResourceType sets the "resource_type" field.
func (alu *AuditLogsUpdate) SetResourceType(s string) *AuditLogsUpdate {
	alu.mutation.SetResourceType(s)
	return alu
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (alu *AuditLogsUpdate) SetNillableResourceType(s *string) *AuditLogsUpdate {
	if s != nil {
		alu.SetResourceType(*s)
	}
	return alu
}

// SetResourceID sets the "resource_id" field.
func (alu *AuditLogsUpdate) SetResourceID(s string) *AuditLogsUpdate {
	alu.mutation.SetResourceID(s)
	return alu
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (alu *AuditLogsUpdate) SetNillableResourceID(s *string) *AuditLogsUpdate {
	if s != nil {
		alu.SetResourceID(*s)
	}
	return alu
}

// ClearResourceID clears the value of the "resource_id" field.
func (alu *AuditLogsUpdate) ClearResourceID() *AuditLogsUpdate {
	alu.mutation.ClearResourceID()
	return alu
}

// SetMetadata sets the "metadata" field.
func (alu *AuditLogsUpdate) SetMetadata(m map[string]interface{}) *AuditLogsUpdate {
	alu.mutation.SetMetadata(m)
	return alu
}

// ClearMetadata clears the value of the "metadata" field.
func (alu *AuditLogsUpdate) ClearMetadata() *AuditLogsUpdate {
	alu.mutation.ClearMetadata()
	return alu
}

// SetChanges sets the "changes" field.
func (alu *AuditLogsUpdate) SetChanges(m map[string]interface{}) *AuditLogsUpdate {
	alu.mutation.SetChanges(m)
	return alu
}

// ClearChanges clears the value of the "changes" field.
func (alu *AuditLogsUpdate) ClearChanges() *AuditLogsUpdate {
	alu.mutation.ClearChanges()
	return alu
}

// SetIPAddress sets the "ip_address" field.
func (alu *AuditLogsUpdate) SetIPAddress(s string) *AuditLogsUpdate {
	alu.mutation.SetIPAddress(s)
	return alu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (alu *AuditLogsUpdate) SetNillableIPAddress(s *string) *AuditLogsUpdate {
	if s != nil {
		alu.SetIPAddress(*s)
	}
	return alu
}

// ClearIPAddress clears the value of the "ip_address" field.
func (alu *AuditLogsUpdate) ClearIPAddress() *AuditLogsUpdate {
	alu.mutation.ClearIPAddress()
	return alu
}

// SetUserAgent sets the "user_agent" field.
func (alu *AuditLogsUpdate) SetUserAgent(s string) *AuditLogsUpdate {
	alu.mutation.SetUserAgent(s)
	return alu
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (alu *AuditLogsUpdate) SetNillableUserAgent(s *string) *AuditLogsUpdate {
	if s != nil {
		alu.SetUserAgent(*s)
	}
	return alu
}

// ClearUserAgent clears the value of the "user_agent" field.
func (alu *AuditLogsUpdate) ClearUserAgent() *AuditLogsUpdate {
	alu.mutation.ClearUserAgent()
	return alu
}

// Mutation returns the AuditLogsMutation object of the builder.
func (alu *AuditLogsUpdate) Mutation() *AuditLogsMutation {
	return alu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (alu *AuditLogsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, alu.sqlSave, alu.mutation, alu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (alu *AuditLogsUpdate) SaveX(ctx context.Context) int {
	affected, err := alu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (alu *AuditLogsUpdate) Exec(ctx context.Context) error {
	_, err := alu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alu *AuditLogsUpdate) ExecX(ctx context.Context) {
	if err := alu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alu *AuditLogsUpdate) check() error {
	if v, ok := alu.mutation.ActionType(); ok {
		if err := auditlogs.ActionTypeValidator(v); err != nil {
			return &ValidationError{Name: "action_type", err: fmt.Errorf(`ent: validator failed for field "AuditLogs.action_type": %w`, err)}
		}
	}
	if v, ok := alu.mutation.ResourceType(); ok {
		if err := auditlogs.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`ent: validator failed for field "AuditLogs.resource_type": %w`, err)}
		}
	}
	return nil
}

func (alu *AuditLogsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := alu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(auditlogs.Table, auditlogs.Columns, sqlgraph.NewFieldSpec(auditlogs.FieldID, field.TypeUUID))
	if ps := alu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alu.mutation.ActorID(); ok {
		_spec.SetField(auditlogs.FieldActorID, field.TypeUUID, value)
	}
	if alu.mutation.ActorIDCleared() {
		_spec.ClearField(auditlogs.FieldActorID, field.TypeUUID)
	}
	if value, ok := alu.mutation.ActionType(); ok {
		_spec.SetField(auditlogs.FieldActionType, field.TypeString, value)
	}
	if value, ok := alu.mutation.ResourceType(); ok {
		_spec.SetField(auditlogs.FieldResourceType, field.TypeString, value)
	}
	if value, ok := alu.mutation.ResourceID(); ok {
		_spec.SetField(auditlogs.FieldResourceID, field.TypeString, value)
	}
	if alu.mutation.ResourceIDCleared() {
		_spec.ClearField(auditlogs.FieldResourceID, field.TypeString)
	}
	if value, ok := alu.mutation.Metadata(); ok {
		_spec.SetField(auditlogs.FieldMetadata, field.TypeJSON, value)
	}
	if alu.mutation.MetadataCleared() {
		_spec.ClearField(auditlogs.FieldMetadata, field.TypeJSON)
	}
	if value, ok := alu.mutation.Changes(); ok {
		_spec.SetField(auditlogs.FieldChanges, field.TypeJSON, value)
	}
	if alu.mutation.ChangesCleared() {
		_spec.ClearField(auditlogs.FieldChanges, field.TypeJSON)
	}
	if value, ok := alu.mutation.IPAddress(); ok {
		_spec.SetField(auditlogs.FieldIPAddress, field.TypeString, value)
	}
	if alu.mutation.IPAddressCleared() {
		_spec.ClearField(auditlogs.FieldIPAddress, field.TypeString)
	}
	if value, ok := alu.mutation.UserAgent(); ok {
		_spec.SetField(auditlogs.FieldUserAgent, field.TypeString, value)
	}
	if alu.mutation.UserAgentCleared() {
		_spec.ClearField(auditlogs.FieldUserAgent, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, alu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auditlogs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	alu.mutation.done = true
	return n, nil
}

// AuditLogsUpdateOne is the builder for updating a single AuditLogs entity.
type AuditLogsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuditLogsMutation
}

// SetActorID sets the "actor_id" field.
func (aluo *AuditLogsUpdateOne) SetActorID(u uuid.UUID) *AuditLogsUpdateOne {
	aluo.mutation.SetActorID(u)
	return aluo
}

// SetNillableActorID sets the "actor_id" field if the given value is not nil.
func (aluo *AuditLogsUpdateOne) SetNillableActorID(u *uuid.UUID) *AuditLogsUpdateOne {
	if u != nil {
		aluo.SetActorID(*u)
	}
	return aluo
}

// ClearActorID clears the value of the "actor_id" field.
func (aluo *AuditLogsUpdateOne) ClearActorID() *AuditLogsUpdateOne {
	aluo.mutation.ClearActorID()
	return aluo
}

// SetActionType sets the "action_type" field.
func (aluo *AuditLogsUpdateOne) SetActionType(s string) *AuditLogsUpdateOne {
	aluo.mutation.SetActionType(s)
	return aluo
}

// SetNillableActionType sets the "action_type" field if the given value is not nil.
func (aluo *AuditLogsUpdateOne) SetNillableActionType(s *string) *AuditLogsUpdateOne {
	if s != nil {
		aluo.SetActionType(*s)
	}
	return aluo
}

// SetResourceType sets the "resource_type" field.
func (aluo *AuditLogsUpdateOne) SetResourceType(s string) *AuditLogsUpdateOne {
	aluo.mutation.SetResourceType(s)
	return aluo
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (aluo *AuditLogsUpdateOne) SetNillableResourceType(s *string) *AuditLogsUpdateOne {
	if s != nil {
		aluo.SetResourceType(*s)
	}
	return aluo
}

// SetResourceID sets the "resource_id" field.
func (aluo *AuditLogsUpdateOne) SetResourceID(s string) *AuditLogsUpdateOne {
	aluo.mutation.SetResourceID(s)
	return aluo
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (aluo *AuditLogsUpdateOne) SetNillableResourceID(s *string) *AuditLogsUpdateOne {
	if s != nil {
		aluo.SetResourceID(*s)
	}
	return aluo
}

// ClearResourceID clears the value of the "resource_id" field.
func (aluo *AuditLogsUpdateOne) ClearResourceID() *AuditLogsUpdateOne {
	aluo.mutation.ClearResourceID()
	return aluo
}

// SetMetadata sets the "metadata" field.
func (aluo *AuditLogsUpdateOne) SetMetadata(m map[string]interface{}) *AuditLogsUpdateOne {
	aluo.mutation.SetMetadata(m)
	return aluo
}

// ClearMetadata clears the value of the "metadata" field.
func (aluo *AuditLogsUpdateOne) ClearMetadata() *AuditLogsUpdateOne {
	aluo.mutation.ClearMetadata()
	return aluo
}

// SetChanges sets the "changes" field.
func (aluo *AuditLogsUpdateOne) SetChanges(m map[string]interface{}) *AuditLogsUpdateOne {
	aluo.mutation.SetChanges(m)
	return aluo
}

// ClearChanges clears the value of the "changes" field.
func (aluo *AuditLogsUpdateOne) ClearChanges() *AuditLogsUpdateOne {
	aluo.mutation.ClearChanges()
	return aluo
}

// SetIPAddress sets the "ip_address" field.
func (aluo *AuditLogsUpdateOne) SetIPAddress(s string) *AuditLogsUpdateOne {
	aluo.mutation.SetIPAddress(s)
	return aluo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (aluo *AuditLogsUpdateOne) SetNillableIPAddress(s *string) *AuditLogsUpdateOne {
	if s != nil {
		aluo.SetIPAddress(*s)
	}
	return aluo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (aluo *AuditLogsUpdateOne) ClearIPAddress() *AuditLogsUpdateOne {
	aluo.mutation.ClearIPAddress()
	return aluo
}

// SetUserAgent sets the "user_agent" field.
func (aluo *AuditLogsUpdateOne) SetUserAgent(s string) *AuditLogsUpdateOne {
	aluo.mutation.SetUserAgent(s)
	return aluo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (aluo *AuditLogsUpdateOne) SetNillableUserAgent(s *string) *AuditLogsUpdateOne {
	if s != nil {
		aluo.SetUserAgent(*s)
	}
	return aluo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (aluo *AuditLogsUpdateOne) ClearUserAgent() *AuditLogsUpdateOne {
	aluo.mutation.ClearUserAgent()
	return aluo
}

// Mutation returns the AuditLogsMutation object of the builder.
func (aluo *AuditLogsUpdateOne) Mutation() *AuditLogsMutation {
	return aluo.mutation
}

// Where appends a list predicates to the AuditLogsUpdate builder.
func (aluo *AuditLogsUpdateOne) Where(ps ...predicate.AuditLogs) *AuditLogsUpdateOne {
	aluo.mutation.Where(ps...)
	return aluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aluo *AuditLogsUpdateOne) Select(field string, fields ...string) *AuditLogsUpdateOne {
	aluo.fields = append([]string{field}, fields...)
	return aluo
}

// Save executes the query and returns the updated AuditLogs entity.
func (aluo *AuditLogsUpdateOne) Save(ctx context.Context) (*AuditLogs, error) {
	return withHooks(ctx, aluo.sqlSave, aluo.mutation, aluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aluo *AuditLogsUpdateOne) SaveX(ctx context.Context) *AuditLogs {
	node, err := aluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aluo *AuditLogsUpdateOne) Exec(ctx context.Context) error {
	_, err := aluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aluo *AuditLogsUpdateOne) ExecX(ctx context.Context) {
	if err := aluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aluo *AuditLogsUpdateOne) check() error {
	if v, ok := aluo.mutation.ActionType(); ok {
		if err := auditlogs.ActionTypeValidator(v); err != nil {
			return &ValidationError{Name: "action_type", err: fmt.Errorf(`ent: validator failed for field "AuditLogs.action_type": %w`, err)}
		}
	}
	if v, ok := aluo.mutation.ResourceType(); ok {
		if err := auditlogs.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`ent: validator failed for field "AuditLogs.resource_type": %w`, err)}
		}
	}
	return nil
}

func (aluo *AuditLogsUpdateOne) sqlSave(ctx context.Context) (_node *AuditLogs, err error) {
	if err := aluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(auditlogs.Table, auditlogs.Columns, sqlgraph.NewFieldSpec(auditlogs.FieldID, field.TypeUUID))
	id, ok := aluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuditLogs.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, auditlogs.FieldID)
		for _, f := range fields {
			if !auditlogs.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != auditlogs.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aluo.mutation.ActorID(); ok {
		_spec.SetField(auditlogs.FieldActorID, field.TypeUUID, value)
	}
	if aluo.mutation.ActorIDCleared() {
		_spec.ClearField(auditlogs.FieldActorID, field.TypeUUID)
	}
	if value, ok := aluo.mutation.ActionType(); ok {
		_spec.SetField(auditlogs.FieldActionType, field.TypeString, value)
	}
	if value, ok := aluo.mutation.ResourceType(); ok {
		_spec.SetField(auditlogs.FieldResourceType, field.TypeString, value)
	}
	if value, ok := aluo.mutation.ResourceID(); ok {
		_spec.SetField(auditlogs.FieldResourceID, field.TypeString, value)
	}
	if aluo.mutation.ResourceIDCleared() {
		_spec.ClearField(auditlogs.FieldResourceID, field.TypeString)
	}
	if value, ok := aluo.mutation.Metadata(); ok {
		_spec.SetField(auditlogs.FieldMetadata, field.TypeJSON, value)
	}
	if aluo.mutation.MetadataCleared() {
		_spec.ClearField(auditlogs.FieldMetadata, field.TypeJSON)
	}
	if value, ok := aluo.mutation.Changes(); ok {
		_spec.SetField(auditlogs.FieldChanges, field.TypeJSON, value)
	}
	if aluo.mutation.ChangesCleared() {
		_spec.ClearField(auditlogs.FieldChanges, field.TypeJSON)
	}
	if value, ok := aluo.mutation.IPAddress(); ok {
		_spec.SetField(auditlogs.FieldIPAddress, field.TypeString, value)
	}
	if aluo.mutation.IPAddressCleared() {
		_spec.ClearField(auditlogs.FieldIPAddress, field.TypeString)
	}
	if value, ok := aluo.mutation.UserAgent(); ok {
		_spec.SetField(auditlogs.FieldUserAgent, field.TypeString, value)
	}
	if aluo.mutation.UserAgentCleared() {
		_spec.ClearField(auditlogs.FieldUserAgent, field.TypeString)
	}
	_node = &AuditLogs{config: aluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auditlogs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aluo.mutation.done = true
	return _node, nil
}
