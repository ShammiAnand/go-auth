// Code generated by ent, DO NOT EDIT.

package users

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/shammianand/go-auth/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldID, id))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldEmail, v))
}

// PasswordHash applies equality check predicate on the "password_hash" field. It's identical to PasswordHashEQ.
func PasswordHash(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldPasswordHash, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldUpdatedAt, v))
}

// LastLogin applies equality check predicate on the "last_login" field. It's identical to LastLoginEQ.
func LastLogin(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldLastLogin, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldIsActive, v))
}

// EmailVerified applies equality check predicate on the "email_verified" field. It's identical to EmailVerifiedEQ.
func EmailVerified(v bool) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldEmailVerified, v))
}

// VerificationToken applies equality check predicate on the "verification_token" field. It's identical to VerificationTokenEQ.
func VerificationToken(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldVerificationToken, v))
}

// VerificationTokenExpiry applies equality check predicate on the "verification_token_expiry" field. It's identical to VerificationTokenExpiryEQ.
func VerificationTokenExpiry(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldVerificationTokenExpiry, v))
}

// PasswordResetToken applies equality check predicate on the "password_reset_token" field. It's identical to PasswordResetTokenEQ.
func PasswordResetToken(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldPasswordResetToken, v))
}

// PasswordResetTokenExpiry applies equality check predicate on the "password_reset_token_expiry" field. It's identical to PasswordResetTokenExpiryEQ.
func PasswordResetTokenExpiry(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldPasswordResetTokenExpiry, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Users {
	return predicate.Users(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Users {
	return predicate.Users(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Users {
	return predicate.Users(sql.FieldContainsFold(FieldEmail, v))
}

// PasswordHashEQ applies the EQ predicate on the "password_hash" field.
func PasswordHashEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldPasswordHash, v))
}

// PasswordHashNEQ applies the NEQ predicate on the "password_hash" field.
func PasswordHashNEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldPasswordHash, v))
}

// PasswordHashIn applies the In predicate on the "password_hash" field.
func PasswordHashIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldPasswordHash, vs...))
}

// PasswordHashNotIn applies the NotIn predicate on the "password_hash" field.
func PasswordHashNotIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldPasswordHash, vs...))
}

// PasswordHashGT applies the GT predicate on the "password_hash" field.
func PasswordHashGT(v string) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldPasswordHash, v))
}

// PasswordHashGTE applies the GTE predicate on the "password_hash" field.
func PasswordHashGTE(v string) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldPasswordHash, v))
}

// PasswordHashLT applies the LT predicate on the "password_hash" field.
func PasswordHashLT(v string) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldPasswordHash, v))
}

// PasswordHashLTE applies the LTE predicate on the "password_hash" field.
func PasswordHashLTE(v string) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldPasswordHash, v))
}

// PasswordHashContains applies the Contains predicate on the "password_hash" field.
func PasswordHashContains(v string) predicate.Users {
	return predicate.Users(sql.FieldContains(FieldPasswordHash, v))
}

// PasswordHashHasPrefix applies the HasPrefix predicate on the "password_hash" field.
func PasswordHashHasPrefix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasPrefix(FieldPasswordHash, v))
}

// PasswordHashHasSuffix applies the HasSuffix predicate on the "password_hash" field.
func PasswordHashHasSuffix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasSuffix(FieldPasswordHash, v))
}

// PasswordHashEqualFold applies the EqualFold predicate on the "password_hash" field.
func PasswordHashEqualFold(v string) predicate.Users {
	return predicate.Users(sql.FieldEqualFold(FieldPasswordHash, v))
}

// PasswordHashContainsFold applies the ContainsFold predicate on the "password_hash" field.
func PasswordHashContainsFold(v string) predicate.Users {
	return predicate.Users(sql.FieldContainsFold(FieldPasswordHash, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldUpdatedAt, v))
}

// LastLoginEQ applies the EQ predicate on the "last_login" field.
func LastLoginEQ(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldLastLogin, v))
}

// LastLoginNEQ applies the NEQ predicate on the "last_login" field.
func LastLoginNEQ(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldLastLogin, v))
}

// LastLoginIn applies the In predicate on the "last_login" field.
func LastLoginIn(vs ...time.Time) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldLastLogin, vs...))
}

// LastLoginNotIn applies the NotIn predicate on the "last_login" field.
func LastLoginNotIn(vs ...time.Time) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldLastLogin, vs...))
}

// LastLoginGT applies the GT predicate on the "last_login" field.
func LastLoginGT(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldLastLogin, v))
}

// LastLoginGTE applies the GTE predicate on the "last_login" field.
func LastLoginGTE(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldLastLogin, v))
}

// LastLoginLT applies the LT predicate on the "last_login" field.
func LastLoginLT(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldLastLogin, v))
}

// LastLoginLTE applies the LTE predicate on the "last_login" field.
func LastLoginLTE(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldLastLogin, v))
}

// LastLoginIsNil applies the IsNil predicate on the "last_login" field.
func LastLoginIsNil() predicate.Users {
	return predicate.Users(sql.FieldIsNull(FieldLastLogin))
}

// LastLoginNotNil applies the NotNil predicate on the "last_login" field.
func LastLoginNotNil() predicate.Users {
	return predicate.Users(sql.FieldNotNull(FieldLastLogin))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldIsActive, v))
}

// EmailVerifiedEQ applies the EQ predicate on the "email_verified" field.
func EmailVerifiedEQ(v bool) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldEmailVerified, v))
}

// EmailVerifiedNEQ applies the NEQ predicate on the "email_verified" field.
func EmailVerifiedNEQ(v bool) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldEmailVerified, v))
}

// VerificationTokenEQ applies the EQ predicate on the "verification_token" field.
func VerificationTokenEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldVerificationToken, v))
}

// VerificationTokenNEQ applies the NEQ predicate on the "verification_token" field.
func VerificationTokenNEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldVerificationToken, v))
}

// VerificationTokenIn applies the In predicate on the "verification_token" field.
func VerificationTokenIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldVerificationToken, vs...))
}

// VerificationTokenNotIn applies the NotIn predicate on the "verification_token" field.
func VerificationTokenNotIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldVerificationToken, vs...))
}

// VerificationTokenGT applies the GT predicate on the "verification_token" field.
func VerificationTokenGT(v string) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldVerificationToken, v))
}

// VerificationTokenGTE applies the GTE predicate on the "verification_token" field.
func VerificationTokenGTE(v string) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldVerificationToken, v))
}

// VerificationTokenLT applies the LT predicate on the "verification_token" field.
func VerificationTokenLT(v string) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldVerificationToken, v))
}

// VerificationTokenLTE applies the LTE predicate on the "verification_token" field.
func VerificationTokenLTE(v string) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldVerificationToken, v))
}

// VerificationTokenContains applies the Contains predicate on the "verification_token" field.
func VerificationTokenContains(v string) predicate.Users {
	return predicate.Users(sql.FieldContains(FieldVerificationToken, v))
}

// VerificationTokenHasPrefix applies the HasPrefix predicate on the "verification_token" field.
func VerificationTokenHasPrefix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasPrefix(FieldVerificationToken, v))
}

// VerificationTokenHasSuffix applies the HasSuffix predicate on the "verification_token" field.
func VerificationTokenHasSuffix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasSuffix(FieldVerificationToken, v))
}

// VerificationTokenIsNil applies the IsNil predicate on the "verification_token" field.
func VerificationTokenIsNil() predicate.Users {
	return predicate.Users(sql.FieldIsNull(FieldVerificationToken))
}

// VerificationTokenNotNil applies the NotNil predicate on the "verification_token" field.
func VerificationTokenNotNil() predicate.Users {
	return predicate.Users(sql.FieldNotNull(FieldVerificationToken))
}

// VerificationTokenEqualFold applies the EqualFold predicate on the "verification_token" field.
func VerificationTokenEqualFold(v string) predicate.Users {
	return predicate.Users(sql.FieldEqualFold(FieldVerificationToken, v))
}

// VerificationTokenContainsFold applies the ContainsFold predicate on the "verification_token" field.
func VerificationTokenContainsFold(v string) predicate.Users {
	return predicate.Users(sql.FieldContainsFold(FieldVerificationToken, v))
}

// VerificationTokenExpiryEQ applies the EQ predicate on the "verification_token_expiry" field.
func VerificationTokenExpiryEQ(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldVerificationTokenExpiry, v))
}

// VerificationTokenExpiryNEQ applies the NEQ predicate on the "verification_token_expiry" field.
func VerificationTokenExpiryNEQ(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldVerificationTokenExpiry, v))
}

// VerificationTokenExpiryIn applies the In predicate on the "verification_token_expiry" field.
func VerificationTokenExpiryIn(vs ...time.Time) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldVerificationTokenExpiry, vs...))
}

// VerificationTokenExpiryNotIn applies the NotIn predicate on the "verification_token_expiry" field.
func VerificationTokenExpiryNotIn(vs ...time.Time) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldVerificationTokenExpiry, vs...))
}

// VerificationTokenExpiryGT applies the GT predicate on the "verification_token_expiry" field.
func VerificationTokenExpiryGT(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldVerificationTokenExpiry, v))
}

// VerificationTokenExpiryGTE applies the GTE predicate on the "verification_token_expiry" field.
func VerificationTokenExpiryGTE(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldVerificationTokenExpiry, v))
}

// VerificationTokenExpiryLT applies the LT predicate on the "verification_token_expiry" field.
func VerificationTokenExpiryLT(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldVerificationTokenExpiry, v))
}

// VerificationTokenExpiryLTE applies the LTE predicate on the "verification_token_expiry" field.
func VerificationTokenExpiryLTE(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldVerificationTokenExpiry, v))
}

// VerificationTokenExpiryIsNil applies the IsNil predicate on the "verification_token_expiry" field.
func VerificationTokenExpiryIsNil() predicate.Users {
	return predicate.Users(sql.FieldIsNull(FieldVerificationTokenExpiry))
}

// VerificationTokenExpiryNotNil applies the NotNil predicate on the "verification_token_expiry" field.
func VerificationTokenExpiryNotNil() predicate.Users {
	return predicate.Users(sql.FieldNotNull(FieldVerificationTokenExpiry))
}

// PasswordResetTokenEQ applies the EQ predicate on the "password_reset_token" field.
func PasswordResetTokenEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldPasswordResetToken, v))
}

// PasswordResetTokenNEQ applies the NEQ predicate on the "password_reset_token" field.
func PasswordResetTokenNEQ(v string) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldPasswordResetToken, v))
}

// PasswordResetTokenIn applies the In predicate on the "password_reset_token" field.
func PasswordResetTokenIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldPasswordResetToken, vs...))
}

// PasswordResetTokenNotIn applies the NotIn predicate on the "password_reset_token" field.
func PasswordResetTokenNotIn(vs ...string) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldPasswordResetToken, vs...))
}

// PasswordResetTokenGT applies the GT predicate on the "password_reset_token" field.
func PasswordResetTokenGT(v string) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldPasswordResetToken, v))
}

// PasswordResetTokenGTE applies the GTE predicate on the "password_reset_token" field.
func PasswordResetTokenGTE(v string) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldPasswordResetToken, v))
}

// PasswordResetTokenLT applies the LT predicate on the "password_reset_token" field.
func PasswordResetTokenLT(v string) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldPasswordResetToken, v))
}

// PasswordResetTokenLTE applies the LTE predicate on the "password_reset_token" field.
func PasswordResetTokenLTE(v string) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldPasswordResetToken, v))
}

// PasswordResetTokenContains applies the Contains predicate on the "password_reset_token" field.
func PasswordResetTokenContains(v string) predicate.Users {
	return predicate.Users(sql.FieldContains(FieldPasswordResetToken, v))
}

// PasswordResetTokenHasPrefix applies the HasPrefix predicate on the "password_reset_token" field.
func PasswordResetTokenHasPrefix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasPrefix(FieldPasswordResetToken, v))
}

// PasswordResetTokenHasSuffix applies the HasSuffix predicate on the "password_reset_token" field.
func PasswordResetTokenHasSuffix(v string) predicate.Users {
	return predicate.Users(sql.FieldHasSuffix(FieldPasswordResetToken, v))
}

// PasswordResetTokenIsNil applies the IsNil predicate on the "password_reset_token" field.
func PasswordResetTokenIsNil() predicate.Users {
	return predicate.Users(sql.FieldIsNull(FieldPasswordResetToken))
}

// PasswordResetTokenNotNil applies the NotNil predicate on the "password_reset_token" field.
func PasswordResetTokenNotNil() predicate.Users {
	return predicate.Users(sql.FieldNotNull(FieldPasswordResetToken))
}

// PasswordResetTokenEqualFold applies the EqualFold predicate on the "password_reset_token" field.
func PasswordResetTokenEqualFold(v string) predicate.Users {
	return predicate.Users(sql.FieldEqualFold(FieldPasswordResetToken, v))
}

// PasswordResetTokenContainsFold applies the ContainsFold predicate on the "password_reset_token" field.
func PasswordResetTokenContainsFold(v string) predicate.Users {
	return predicate.Users(sql.FieldContainsFold(FieldPasswordResetToken, v))
}

// PasswordResetTokenExpiryEQ applies the EQ predicate on the "password_reset_token_expiry" field.
func PasswordResetTokenExpiryEQ(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldEQ(FieldPasswordResetTokenExpiry, v))
}

// PasswordResetTokenExpiryNEQ applies the NEQ predicate on the "password_reset_token_expiry" field.
func PasswordResetTokenExpiryNEQ(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldNEQ(FieldPasswordResetTokenExpiry, v))
}

// PasswordResetTokenExpiryIn applies the In predicate on the "password_reset_token_expiry" field.
func PasswordResetTokenExpiryIn(vs ...time.Time) predicate.Users {
	return predicate.Users(sql.FieldIn(FieldPasswordResetTokenExpiry, vs...))
}

// PasswordResetTokenExpiryNotIn applies the NotIn predicate on the "password_reset_token_expiry" field.
func PasswordResetTokenExpiryNotIn(vs ...time.Time) predicate.Users {
	return predicate.Users(sql.FieldNotIn(FieldPasswordResetTokenExpiry, vs...))
}

// PasswordResetTokenExpiryGT applies the GT predicate on the "password_reset_token_expiry" field.
func PasswordResetTokenExpiryGT(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldGT(FieldPasswordResetTokenExpiry, v))
}

// PasswordResetTokenExpiryGTE applies the GTE predicate on the "password_reset_token_expiry" field.
func PasswordResetTokenExpiryGTE(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldGTE(FieldPasswordResetTokenExpiry, v))
}

// PasswordResetTokenExpiryLT applies the LT predicate on the "password_reset_token_expiry" field.
func PasswordResetTokenExpiryLT(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldLT(FieldPasswordResetTokenExpiry, v))
}

// PasswordResetTokenExpiryLTE applies the LTE predicate on the "password_reset_token_expiry" field.
func PasswordResetTokenExpiryLTE(v time.Time) predicate.Users {
	return predicate.Users(sql.FieldLTE(FieldPasswordResetTokenExpiry, v))
}

// PasswordResetTokenExpiryIsNil applies the IsNil predicate on the "password_reset_token_expiry" field.
func PasswordResetTokenExpiryIsNil() predicate.Users {
	return predicate.Users(sql.FieldIsNull(FieldPasswordResetTokenExpiry))
}

// PasswordResetTokenExpiryNotNil applies the NotNil predicate on the "password_reset_token_expiry" field.
func PasswordResetTokenExpiryNotNil() predicate.Users {
	return predicate.Users(sql.FieldNotNull(FieldPasswordResetTokenExpiry))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Users {
	return predicate.Users(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Users {
	return predicate.Users(sql.FieldNotNull(FieldMetadata))
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RolesTable, RolesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.Roles) predicate.Users {
	return predicate.Users(func(s *sql.Selector) {
		step := newRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Users) predicate.Users {
	return predicate.Users(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Users) predicate.Users {
	return predicate.Users(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Users) predicate.Users {
	return predicate.Users(sql.NotPredicates(p))
}
