// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shammianand/go-auth/ent/roles"
	"github.com/shammianand/go-auth/ent/userroles"
	"github.com/shammianand/go-auth/ent/users"
)

// UserRolesCreate is the builder for creating a UserRoles entity.
type UserRolesCreate struct {
	config
	mutation *UserRolesMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (urc *UserRolesCreate) SetUserID(u uuid.UUID) *UserRolesCreate {
	urc.mutation.SetUserID(u)
	return urc
}

// SetRoleID sets the "role_id" field.
func (urc *UserRolesCreate) SetRoleID(i int) *UserRolesCreate {
	urc.mutation.SetRoleID(i)
	return urc
}

// SetAssignedBy sets the "assigned_by" field.
func (urc *UserRolesCreate) SetAssignedBy(u uuid.UUID) *UserRolesCreate {
	urc.mutation.SetAssignedBy(u)
	return urc
}

// SetNillableAssignedBy sets the "assigned_by" field if the given value is not nil.
func (urc *UserRolesCreate) SetNillableAssignedBy(u *uuid.UUID) *UserRolesCreate {
	if u != nil {
		urc.SetAssignedBy(*u)
	}
	return urc
}

// SetAssignedAt sets the "assigned_at" field.
func (urc *UserRolesCreate) SetAssignedAt(t time.Time) *UserRolesCreate {
	urc.mutation.SetAssignedAt(t)
	return urc
}

// SetNillableAssignedAt sets the "assigned_at" field if the given value is not nil.
func (urc *UserRolesCreate) SetNillableAssignedAt(t *time.Time) *UserRolesCreate {
	if t != nil {
		urc.SetAssignedAt(*t)
	}
	return urc
}

// SetID sets the "id" field.
func (urc *UserRolesCreate) SetID(u uuid.UUID) *UserRolesCreate {
	urc.mutation.SetID(u)
	return urc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (urc *UserRolesCreate) SetNillableID(u *uuid.UUID) *UserRolesCreate {
	if u != nil {
		urc.SetID(*u)
	}
	return urc
}

// SetUser sets the "user" edge to the Users entity.
func (urc *UserRolesCreate) SetUser(u *Users) *UserRolesCreate {
	return urc.SetUserID(u.ID)
}

// SetRole sets the "role" edge to the Roles entity.
func (urc *UserRolesCreate) SetRole(r *Roles) *UserRolesCreate {
	return urc.SetRoleID(r.ID)
}

// Mutation returns the UserRolesMutation object of the builder.
func (urc *UserRolesCreate) Mutation() *UserRolesMutation {
	return urc.mutation
}

// Save creates the UserRoles in the database.
func (urc *UserRolesCreate) Save(ctx context.Context) (*UserRoles, error) {
	urc.defaults()
	return withHooks(ctx, urc.sqlSave, urc.mutation, urc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (urc *UserRolesCreate) SaveX(ctx context.Context) *UserRoles {
	v, err := urc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urc *UserRolesCreate) Exec(ctx context.Context) error {
	_, err := urc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urc *UserRolesCreate) ExecX(ctx context.Context) {
	if err := urc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (urc *UserRolesCreate) defaults() {
	if _, ok := urc.mutation.AssignedAt(); !ok {
		v := userroles.DefaultAssignedAt()
		urc.mutation.SetAssignedAt(v)
	}
	if _, ok := urc.mutation.ID(); !ok {
		v := userroles.DefaultID()
		urc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (urc *UserRolesCreate) check() error {
	if _, ok := urc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserRoles.user_id"`)}
	}
	if _, ok := urc.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "UserRoles.role_id"`)}
	}
	if _, ok := urc.mutation.AssignedAt(); !ok {
		return &ValidationError{Name: "assigned_at", err: errors.New(`ent: missing required field "UserRoles.assigned_at"`)}
	}
	if _, ok := urc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserRoles.user"`)}
	}
	if _, ok := urc.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required edge "UserRoles.role"`)}
	}
	return nil
}

func (urc *UserRolesCreate) sqlSave(ctx context.Context) (*UserRoles, error) {
	if err := urc.check(); err != nil {
		return nil, err
	}
	_node, _spec := urc.createSpec()
	if err := sqlgraph.CreateNode(ctx, urc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	urc.mutation.id = &_node.ID
	urc.mutation.done = true
	return _node, nil
}

func (urc *UserRolesCreate) createSpec() (*UserRoles, *sqlgraph.CreateSpec) {
	var (
		_node = &UserRoles{config: urc.config}
		_spec = sqlgraph.NewCreateSpec(userroles.Table, sqlgraph.NewFieldSpec(userroles.FieldID, field.TypeUUID))
	)
	if id, ok := urc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := urc.mutation.AssignedBy(); ok {
		_spec.SetField(userroles.FieldAssignedBy, field.TypeUUID, value)
		_node.AssignedBy = &value
	}
	if value, ok := urc.mutation.AssignedAt(); ok {
		_spec.SetField(userroles.FieldAssignedAt, field.TypeTime, value)
		_node.AssignedAt = value
	}
	if nodes := urc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userroles.UserTable,
			Columns: []string{userroles.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := urc.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userroles.RoleTable,
			Columns: []string{userroles.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roles.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserRolesCreateBulk is the builder for creating many UserRoles entities in bulk.
type UserRolesCreateBulk struct {
	config
	err      error
	builders []*UserRolesCreate
}

// Save creates the UserRoles entities in the database.
func (urcb *UserRolesCreateBulk) Save(ctx context.Context) ([]*UserRoles, error) {
	if urcb.err != nil {
		return nil, urcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(urcb.builders))
	nodes := make([]*UserRoles, len(urcb.builders))
	mutators := make([]Mutator, len(urcb.builders))
	for i := range urcb.builders {
		func(i int, root context.Context) {
			builder := urcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserRolesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, urcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, urcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, urcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (urcb *UserRolesCreateBulk) SaveX(ctx context.Context) []*UserRoles {
	v, err := urcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urcb *UserRolesCreateBulk) Exec(ctx context.Context) error {
	_, err := urcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urcb *UserRolesCreateBulk) ExecX(ctx context.Context) {
	if err := urcb.Exec(ctx); err != nil {
		panic(err)
	}
}
