// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shammianand/go-auth/ent/emaillogs"
)

// EmailLogs is the model entity for the EmailLogs schema.
type EmailLogs struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// User this email was sent to
	UserID *uuid.UUID `json:"user_id,omitempty"`
	// Email address of recipient
	Recipient string `json:"recipient,omitempty"`
	// Type of email (verification, password_reset, welcome)
	EmailType string `json:"email_type,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject,omitempty"`
	// Status: sent, delivered, failed, bounced
	Status string `json:"status,omitempty"`
	// Email provider used (ses, mailhog)
	Provider string `json:"provider,omitempty"`
	// Message ID from email provider
	ProviderMessageID string `json:"provider_message_id,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Error message if delivery failed
	ErrorMessage string `json:"error_message,omitempty"`
	// SentAt holds the value of the "sent_at" field.
	SentAt time.Time `json:"sent_at,omitempty"`
	// DeliveredAt holds the value of the "delivered_at" field.
	DeliveredAt  *time.Time `json:"delivered_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmailLogs) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emaillogs.FieldUserID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case emaillogs.FieldMetadata:
			values[i] = new([]byte)
		case emaillogs.FieldRecipient, emaillogs.FieldEmailType, emaillogs.FieldSubject, emaillogs.FieldStatus, emaillogs.FieldProvider, emaillogs.FieldProviderMessageID, emaillogs.FieldErrorMessage:
			values[i] = new(sql.NullString)
		case emaillogs.FieldSentAt, emaillogs.FieldDeliveredAt:
			values[i] = new(sql.NullTime)
		case emaillogs.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmailLogs fields.
func (el *EmailLogs) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emaillogs.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				el.ID = *value
			}
		case emaillogs.FieldUserID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				el.UserID = new(uuid.UUID)
				*el.UserID = *value.S.(*uuid.UUID)
			}
		case emaillogs.FieldRecipient:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field recipient", values[i])
			} else if value.Valid {
				el.Recipient = value.String
			}
		case emaillogs.FieldEmailType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email_type", values[i])
			} else if value.Valid {
				el.EmailType = value.String
			}
		case emaillogs.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				el.Subject = value.String
			}
		case emaillogs.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				el.Status = value.String
			}
		case emaillogs.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				el.Provider = value.String
			}
		case emaillogs.FieldProviderMessageID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_message_id", values[i])
			} else if value.Valid {
				el.ProviderMessageID = value.String
			}
		case emaillogs.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &el.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case emaillogs.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				el.ErrorMessage = value.String
			}
		case emaillogs.FieldSentAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sent_at", values[i])
			} else if value.Valid {
				el.SentAt = value.Time
			}
		case emaillogs.FieldDeliveredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delivered_at", values[i])
			} else if value.Valid {
				el.DeliveredAt = new(time.Time)
				*el.DeliveredAt = value.Time
			}
		default:
			el.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmailLogs.
// This includes values selected through modifiers, order, etc.
func (el *EmailLogs) Value(name string) (ent.Value, error) {
	return el.selectValues.Get(name)
}

// Update returns a builder for updating this EmailLogs.
// Note that you need to call EmailLogs.Unwrap() before calling this method if this EmailLogs
// was returned from a transaction, and the transaction was committed or rolled back.
func (el *EmailLogs) Update() *EmailLogsUpdateOne {
	return NewEmailLogsClient(el.config).UpdateOne(el)
}

// Unwrap unwraps the EmailLogs entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (el *EmailLogs) Unwrap() *EmailLogs {
	_tx, ok := el.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmailLogs is not a transactional entity")
	}
	el.config.driver = _tx.drv
	return el
}

// String implements the fmt.Stringer.
func (el *EmailLogs) String() string {
	var builder strings.Builder
	builder.WriteString("EmailLogs(")
	builder.WriteString(fmt.Sprintf("id=%v, ", el.ID))
	if v := el.UserID; v != nil {
		builder.WriteString("user_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("recipient=")
	builder.WriteString(el.Recipient)
	builder.WriteString(", ")
	builder.WriteString("email_type=")
	builder.WriteString(el.EmailType)
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(el.Subject)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(el.Status)
	builder.WriteString(", ")
	builder.WriteString("provider=")
	builder.WriteString(el.Provider)
	builder.WriteString(", ")
	builder.WriteString("provider_message_id=")
	builder.WriteString(el.ProviderMessageID)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", el.Metadata))
	builder.WriteString(", ")
	builder.WriteString("error_message=")
	builder.WriteString(el.ErrorMessage)
	builder.WriteString(", ")
	builder.WriteString("sent_at=")
	builder.WriteString(el.SentAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := el.DeliveredAt; v != nil {
		builder.WriteString("delivered_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// EmailLogsSlice is a parsable slice of EmailLogs.
type EmailLogsSlice []*EmailLogs
