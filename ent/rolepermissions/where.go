// Code generated by ent, DO NOT EDIT.

package rolepermissions

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shammianand/go-auth/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldLTE(FieldID, id))
}

// RoleID applies equality check predicate on the "role_id" field. It's identical to RoleIDEQ.
func RoleID(v int) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldEQ(FieldRoleID, v))
}

// PermissionID applies equality check predicate on the "permission_id" field. It's identical to PermissionIDEQ.
func PermissionID(v int) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldEQ(FieldPermissionID, v))
}

// AssignedAt applies equality check predicate on the "assigned_at" field. It's identical to AssignedAtEQ.
func AssignedAt(v time.Time) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldEQ(FieldAssignedAt, v))
}

// RoleIDEQ applies the EQ predicate on the "role_id" field.
func RoleIDEQ(v int) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldEQ(FieldRoleID, v))
}

// RoleIDNEQ applies the NEQ predicate on the "role_id" field.
func RoleIDNEQ(v int) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldNEQ(FieldRoleID, v))
}

// RoleIDIn applies the In predicate on the "role_id" field.
func RoleIDIn(vs ...int) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldIn(FieldRoleID, vs...))
}

// RoleIDNotIn applies the NotIn predicate on the "role_id" field.
func RoleIDNotIn(vs ...int) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldNotIn(FieldRoleID, vs...))
}

// PermissionIDEQ applies the EQ predicate on the "permission_id" field.
func PermissionIDEQ(v int) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldEQ(FieldPermissionID, v))
}

// PermissionIDNEQ applies the NEQ predicate on the "permission_id" field.
func PermissionIDNEQ(v int) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldNEQ(FieldPermissionID, v))
}

// PermissionIDIn applies the In predicate on the "permission_id" field.
func PermissionIDIn(vs ...int) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldIn(FieldPermissionID, vs...))
}

// PermissionIDNotIn applies the NotIn predicate on the "permission_id" field.
func PermissionIDNotIn(vs ...int) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldNotIn(FieldPermissionID, vs...))
}

// AssignedAtEQ applies the EQ predicate on the "assigned_at" field.
func AssignedAtEQ(v time.Time) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldEQ(FieldAssignedAt, v))
}

// AssignedAtNEQ applies the NEQ predicate on the "assigned_at" field.
func AssignedAtNEQ(v time.Time) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldNEQ(FieldAssignedAt, v))
}

// AssignedAtIn applies the In predicate on the "assigned_at" field.
func AssignedAtIn(vs ...time.Time) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldIn(FieldAssignedAt, vs...))
}

// AssignedAtNotIn applies the NotIn predicate on the "assigned_at" field.
func AssignedAtNotIn(vs ...time.Time) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldNotIn(FieldAssignedAt, vs...))
}

// AssignedAtGT applies the GT predicate on the "assigned_at" field.
func AssignedAtGT(v time.Time) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldGT(FieldAssignedAt, v))
}

// AssignedAtGTE applies the GTE predicate on the "assigned_at" field.
func AssignedAtGTE(v time.Time) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldGTE(FieldAssignedAt, v))
}

// AssignedAtLT applies the LT predicate on the "assigned_at" field.
func AssignedAtLT(v time.Time) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldLT(FieldAssignedAt, v))
}

// AssignedAtLTE applies the LTE predicate on the "assigned_at" field.
func AssignedAtLTE(v time.Time) predicate.RolePermissions {
	return predicate.RolePermissions(sql.FieldLTE(FieldAssignedAt, v))
}

// HasRole applies the HasEdge predicate on the "role" edge.
func HasRole() predicate.RolePermissions {
	return predicate.RolePermissions(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RoleTable, RoleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleWith applies the HasEdge predicate on the "role" edge with a given conditions (other predicates).
func HasRoleWith(preds ...predicate.Roles) predicate.RolePermissions {
	return predicate.RolePermissions(func(s *sql.Selector) {
		step := newRoleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPermission applies the HasEdge predicate on the "permission" edge.
func HasPermission() predicate.RolePermissions {
	return predicate.RolePermissions(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PermissionTable, PermissionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPermissionWith applies the HasEdge predicate on the "permission" edge with a given conditions (other predicates).
func HasPermissionWith(preds ...predicate.Permissions) predicate.RolePermissions {
	return predicate.RolePermissions(func(s *sql.Selector) {
		step := newPermissionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RolePermissions) predicate.RolePermissions {
	return predicate.RolePermissions(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RolePermissions) predicate.RolePermissions {
	return predicate.RolePermissions(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RolePermissions) predicate.RolePermissions {
	return predicate.RolePermissions(sql.NotPredicates(p))
}
