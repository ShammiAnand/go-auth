// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shammianand/go-auth/ent/auditlogs"
)

// AuditLogs is the model entity for the AuditLogs schema.
type AuditLogs struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// User who performed the action
	ActorID *uuid.UUID `json:"actor_id,omitempty"`
	// Type of action (e.g., role.create, permission.assign)
	ActionType string `json:"action_type,omitempty"`
	// Type of resource affected (e.g., role, user_role)
	ResourceType string `json:"resource_type,omitempty"`
	// ID of the affected resource
	ResourceID string `json:"resource_id,omitempty"`
	// Additional context about the action
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Before/after values for updates
	Changes map[string]interface{} `json:"changes,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	UserAgent string `json:"user_agent,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuditLogs) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case auditlogs.FieldActorID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case auditlogs.FieldMetadata, auditlogs.FieldChanges:
			values[i] = new([]byte)
		case auditlogs.FieldActionType, auditlogs.FieldResourceType, auditlogs.FieldResourceID, auditlogs.FieldIPAddress, auditlogs.FieldUserAgent:
			values[i] = new(sql.NullString)
		case auditlogs.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case auditlogs.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuditLogs fields.
func (al *AuditLogs) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case auditlogs.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				al.ID = *value
			}
		case auditlogs.FieldActorID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field actor_id", values[i])
			} else if value.Valid {
				al.ActorID = new(uuid.UUID)
				*al.ActorID = *value.S.(*uuid.UUID)
			}
		case auditlogs.FieldActionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action_type", values[i])
			} else if value.Valid {
				al.ActionType = value.String
			}
		case auditlogs.FieldResourceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_type", values[i])
			} else if value.Valid {
				al.ResourceType = value.String
			}
		case auditlogs.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				al.ResourceID = value.String
			}
		case auditlogs.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &al.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case auditlogs.FieldChanges:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field changes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &al.Changes); err != nil {
					return fmt.Errorf("unmarshal field changes: %w", err)
				}
			}
		case auditlogs.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				al.IPAddress = value.String
			}
		case auditlogs.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				al.UserAgent = value.String
			}
		case auditlogs.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				al.CreatedAt = value.Time
			}
		default:
			al.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuditLogs.
// This includes values selected through modifiers, order, etc.
func (al *AuditLogs) Value(name string) (ent.Value, error) {
	return al.selectValues.Get(name)
}

// Update returns a builder for updating this AuditLogs.
// Note that you need to call AuditLogs.Unwrap() before calling this method if this AuditLogs
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *AuditLogs) Update() *AuditLogsUpdateOne {
	return NewAuditLogsClient(al.config).UpdateOne(al)
}

// Unwrap unwraps the AuditLogs entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *AuditLogs) Unwrap() *AuditLogs {
	_tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuditLogs is not a transactional entity")
	}
	al.config.driver = _tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *AuditLogs) String() string {
	var builder strings.Builder
	builder.WriteString("AuditLogs(")
	builder.WriteString(fmt.Sprintf("id=%v, ", al.ID))
	if v := al.ActorID; v != nil {
		builder.WriteString("actor_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("action_type=")
	builder.WriteString(al.ActionType)
	builder.WriteString(", ")
	builder.WriteString("resource_type=")
	builder.WriteString(al.ResourceType)
	builder.WriteString(", ")
	builder.WriteString("resource_id=")
	builder.WriteString(al.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", al.Metadata))
	builder.WriteString(", ")
	builder.WriteString("changes=")
	builder.WriteString(fmt.Sprintf("%v", al.Changes))
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(al.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(al.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(al.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AuditLogsSlice is a parsable slice of AuditLogs.
type AuditLogsSlice []*AuditLogs
