// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shammianand/go-auth/ent/emaillogs"
	"github.com/shammianand/go-auth/ent/predicate"
)

// EmailLogsUpdate is the builder for updating EmailLogs entities.
type EmailLogsUpdate struct {
	config
	hooks    []Hook
	mutation *EmailLogsMutation
}

// Where appends a list predicates to the EmailLogsUpdate builder.
func (elu *EmailLogsUpdate) Where(ps ...predicate.EmailLogs) *EmailLogsUpdate {
	elu.mutation.Where(ps...)
	return elu
}

// SetUserID sets the "user_id" field.
func (elu *EmailLogsUpdate) SetUserID(u uuid.UUID) *EmailLogsUpdate {
	elu.mutation.SetUserID(u)
	return elu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (elu *EmailLogsUpdate) SetNillableUserID(u *uuid.UUID) *EmailLogsUpdate {
	if u != nil {
		elu.SetUserID(*u)
	}
	return elu
}

// ClearUserID clears the value of the "user_id" field.
func (elu *EmailLogsUpdate) ClearUserID() *EmailLogsUpdate {
	elu.mutation.ClearUserID()
	return elu
}

// SetRecipient sets the "recipient" field.
func (elu *EmailLogsUpdate) SetRecipient(s string) *EmailLogsUpdate {
	elu.mutation.SetRecipient(s)
	return elu
}

// SetNillableRecipient sets the "recipient" field if the given value is not nil.
func (elu *EmailLogsUpdate) SetNillableRecipient(s *string) *EmailLogsUpdate {
	if s != nil {
		elu.SetRecipient(*s)
	}
	return elu
}

// SetEmailType sets the "email_type" field.
func (elu *EmailLogsUpdate) SetEmailType(s string) *EmailLogsUpdate {
	elu.mutation.SetEmailType(s)
	return elu
}

// SetNillableEmailType sets the "email_type" field if the given value is not nil.
func (elu *EmailLogsUpdate) SetNillableEmailType(s *string) *EmailLogsUpdate {
	if s != nil {
		elu.SetEmailType(*s)
	}
	return elu
}

// SetSubject sets the "subject" field.
func (elu *EmailLogsUpdate) SetSubject(s string) *EmailLogsUpdate {
	elu.mutation.SetSubject(s)
	return elu
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (elu *EmailLogsUpdate) SetNillableSubject(s *string) *EmailLogsUpdate {
	if s != nil {
		elu.SetSubject(*s)
	}
	return elu
}

// ClearSubject clears the value of the "subject" field.
func (elu *EmailLogsUpdate) ClearSubject() *EmailLogsUpdate {
	elu.mutation.ClearSubject()
	return elu
}

// SetStatus sets the "status" field.
func (elu *EmailLogsUpdate) SetStatus(s string) *EmailLogsUpdate {
	elu.mutation.SetStatus(s)
	return elu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (elu *EmailLogsUpdate) SetNillableStatus(s *string) *EmailLogsUpdate {
	if s != nil {
		elu.SetStatus(*s)
	}
	return elu
}

// SetProvider sets the "provider" field.
func (elu *EmailLogsUpdate) SetProvider(s string) *EmailLogsUpdate {
	elu.mutation.SetProvider(s)
	return elu
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (elu *EmailLogsUpdate) SetNillableProvider(s *string) *EmailLogsUpdate {
	if s != nil {
		elu.SetProvider(*s)
	}
	return elu
}

// SetProviderMessageID sets the "provider_message_id" field.
func (elu *EmailLogsUpdate) SetProviderMessageID(s string) *EmailLogsUpdate {
	elu.mutation.SetProviderMessageID(s)
	return elu
}

// SetNillableProviderMessageID sets the "provider_message_id" field if the given value is not nil.
func (elu *EmailLogsUpdate) SetNillableProviderMessageID(s *string) *EmailLogsUpdate {
	if s != nil {
		elu.SetProviderMessageID(*s)
	}
	return elu
}

// ClearProviderMessageID clears the value of the "provider_message_id" field.
func (elu *EmailLogsUpdate) ClearProviderMessageID() *EmailLogsUpdate {
	elu.mutation.ClearProviderMessageID()
	return elu
}

// SetMetadata sets the "metadata" field.
func (elu *EmailLogsUpdate) SetMetadata(m map[string]interface{}) *EmailLogsUpdate {
	elu.mutation.SetMetadata(m)
	return elu
}

// ClearMetadata clears the value of the "metadata" field.
func (elu *EmailLogsUpdate) ClearMetadata() *EmailLogsUpdate {
	elu.mutation.ClearMetadata()
	return elu
}

// SetErrorMessage sets the "error_message" field.
func (elu *EmailLogsUpdate) SetErrorMessage(s string) *EmailLogsUpdate {
	elu.mutation.SetErrorMessage(s)
	return elu
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (elu *EmailLogsUpdate) SetNillableErrorMessage(s *string) *EmailLogsUpdate {
	if s != nil {
		elu.SetErrorMessage(*s)
	}
	return elu
}

// ClearErrorMessage clears the value of the "error_message" field.
func (elu *EmailLogsUpdate) ClearErrorMessage() *EmailLogsUpdate {
	elu.mutation.ClearErrorMessage()
	return elu
}

// SetDeliveredAt sets the "delivered_at" field.
func (elu *EmailLogsUpdate) SetDeliveredAt(t time.Time) *EmailLogsUpdate {
	elu.mutation.SetDeliveredAt(t)
	return elu
}

// SetNillableDeliveredAt sets the "delivered_at" field if the given value is not nil.
func (elu *EmailLogsUpdate) SetNillableDeliveredAt(t *time.Time) *EmailLogsUpdate {
	if t != nil {
		elu.SetDeliveredAt(*t)
	}
	return elu
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (elu *EmailLogsUpdate) ClearDeliveredAt() *EmailLogsUpdate {
	elu.mutation.ClearDeliveredAt()
	return elu
}

// Mutation returns the EmailLogsMutation object of the builder.
func (elu *EmailLogsUpdate) Mutation() *EmailLogsMutation {
	return elu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (elu *EmailLogsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, elu.sqlSave, elu.mutation, elu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (elu *EmailLogsUpdate) SaveX(ctx context.Context) int {
	affected, err := elu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (elu *EmailLogsUpdate) Exec(ctx context.Context) error {
	_, err := elu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elu *EmailLogsUpdate) ExecX(ctx context.Context) {
	if err := elu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (elu *EmailLogsUpdate) check() error {
	if v, ok := elu.mutation.Recipient(); ok {
		if err := emaillogs.RecipientValidator(v); err != nil {
			return &ValidationError{Name: "recipient", err: fmt.Errorf(`ent: validator failed for field "EmailLogs.recipient": %w`, err)}
		}
	}
	if v, ok := elu.mutation.EmailType(); ok {
		if err := emaillogs.EmailTypeValidator(v); err != nil {
			return &ValidationError{Name: "email_type", err: fmt.Errorf(`ent: validator failed for field "EmailLogs.email_type": %w`, err)}
		}
	}
	return nil
}

func (elu *EmailLogsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := elu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(emaillogs.Table, emaillogs.Columns, sqlgraph.NewFieldSpec(emaillogs.FieldID, field.TypeUUID))
	if ps := elu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := elu.mutation.UserID(); ok {
		_spec.SetField(emaillogs.FieldUserID, field.TypeUUID, value)
	}
	if elu.mutation.UserIDCleared() {
		_spec.ClearField(emaillogs.FieldUserID, field.TypeUUID)
	}
	if value, ok := elu.mutation.Recipient(); ok {
		_spec.SetField(emaillogs.FieldRecipient, field.TypeString, value)
	}
	if value, ok := elu.mutation.EmailType(); ok {
		_spec.SetField(emaillogs.FieldEmailType, field.TypeString, value)
	}
	if value, ok := elu.mutation.Subject(); ok {
		_spec.SetField(emaillogs.FieldSubject, field.TypeString, value)
	}
	if elu.mutation.SubjectCleared() {
		_spec.ClearField(emaillogs.FieldSubject, field.TypeString)
	}
	if value, ok := elu.mutation.Status(); ok {
		_spec.SetField(emaillogs.FieldStatus, field.TypeString, value)
	}
	if value, ok := elu.mutation.Provider(); ok {
		_spec.SetField(emaillogs.FieldProvider, field.TypeString, value)
	}
	if value, ok := elu.mutation.ProviderMessageID(); ok {
		_spec.SetField(emaillogs.FieldProviderMessageID, field.TypeString, value)
	}
	if elu.mutation.ProviderMessageIDCleared() {
		_spec.ClearField(emaillogs.FieldProviderMessageID, field.TypeString)
	}
	if value, ok := elu.mutation.Metadata(); ok {
		_spec.SetField(emaillogs.FieldMetadata, field.TypeJSON, value)
	}
	if elu.mutation.MetadataCleared() {
		_spec.ClearField(emaillogs.FieldMetadata, field.TypeJSON)
	}
	if value, ok := elu.mutation.ErrorMessage(); ok {
		_spec.SetField(emaillogs.FieldErrorMessage, field.TypeString, value)
	}
	if elu.mutation.ErrorMessageCleared() {
		_spec.ClearField(emaillogs.FieldErrorMessage, field.TypeString)
	}
	if value, ok := elu.mutation.DeliveredAt(); ok {
		_spec.SetField(emaillogs.FieldDeliveredAt, field.TypeTime, value)
	}
	if elu.mutation.DeliveredAtCleared() {
		_spec.ClearField(emaillogs.FieldDeliveredAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, elu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emaillogs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	elu.mutation.done = true
	return n, nil
}

// EmailLogsUpdateOne is the builder for updating a single EmailLogs entity.
type EmailLogsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmailLogsMutation
}

// SetUserID sets the "user_id" field.
func (eluo *EmailLogsUpdateOne) SetUserID(u uuid.UUID) *EmailLogsUpdateOne {
	eluo.mutation.SetUserID(u)
	return eluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (eluo *EmailLogsUpdateOne) SetNillableUserID(u *uuid.UUID) *EmailLogsUpdateOne {
	if u != nil {
		eluo.SetUserID(*u)
	}
	return eluo
}

// ClearUserID clears the value of the "user_id" field.
func (eluo *EmailLogsUpdateOne) ClearUserID() *EmailLogsUpdateOne {
	eluo.mutation.ClearUserID()
	return eluo
}

// SetRecipient sets the "recipient" field.
func (eluo *EmailLogsUpdateOne) SetRecipient(s string) *EmailLogsUpdateOne {
	eluo.mutation.SetRecipient(s)
	return eluo
}

// SetNillableRecipient sets the "recipient" field if the given value is not nil.
func (eluo *EmailLogsUpdateOne) SetNillableRecipient(s *string) *EmailLogsUpdateOne {
	if s != nil {
		eluo.SetRecipient(*s)
	}
	return eluo
}

// SetEmailType sets the "email_type" field.
func (eluo *EmailLogsUpdateOne) SetEmailType(s string) *EmailLogsUpdateOne {
	eluo.mutation.SetEmailType(s)
	return eluo
}

// SetNillableEmailType sets the "email_type" field if the given value is not nil.
func (eluo *EmailLogsUpdateOne) SetNillableEmailType(s *string) *EmailLogsUpdateOne {
	if s != nil {
		eluo.SetEmailType(*s)
	}
	return eluo
}

// SetSubject sets the "subject" field.
func (eluo *EmailLogsUpdateOne) SetSubject(s string) *EmailLogsUpdateOne {
	eluo.mutation.SetSubject(s)
	return eluo
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (eluo *EmailLogsUpdateOne) SetNillableSubject(s *string) *EmailLogsUpdateOne {
	if s != nil {
		eluo.SetSubject(*s)
	}
	return eluo
}

// ClearSubject clears the value of the "subject" field.
func (eluo *EmailLogsUpdateOne) ClearSubject() *EmailLogsUpdateOne {
	eluo.mutation.ClearSubject()
	return eluo
}

// SetStatus sets the "status" field.
func (eluo *EmailLogsUpdateOne) SetStatus(s string) *EmailLogsUpdateOne {
	eluo.mutation.SetStatus(s)
	return eluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eluo *EmailLogsUpdateOne) SetNillableStatus(s *string) *EmailLogsUpdateOne {
	if s != nil {
		eluo.SetStatus(*s)
	}
	return eluo
}

// SetProvider sets the "provider" field.
func (eluo *EmailLogsUpdateOne) SetProvider(s string) *EmailLogsUpdateOne {
	eluo.mutation.SetProvider(s)
	return eluo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (eluo *EmailLogsUpdateOne) SetNillableProvider(s *string) *EmailLogsUpdateOne {
	if s != nil {
		eluo.SetProvider(*s)
	}
	return eluo
}

// SetProviderMessageID sets the "provider_message_id" field.
func (eluo *EmailLogsUpdateOne) SetProviderMessageID(s string) *EmailLogsUpdateOne {
	eluo.mutation.SetProviderMessageID(s)
	return eluo
}

// SetNillableProviderMessageID sets the "provider_message_id" field if the given value is not nil.
func (eluo *EmailLogsUpdateOne) SetNillableProviderMessageID(s *string) *EmailLogsUpdateOne {
	if s != nil {
		eluo.SetProviderMessageID(*s)
	}
	return eluo
}

// ClearProviderMessageID clears the value of the "provider_message_id" field.
func (eluo *EmailLogsUpdateOne) ClearProviderMessageID() *EmailLogsUpdateOne {
	eluo.mutation.ClearProviderMessageID()
	return eluo
}

// SetMetadata sets the "metadata" field.
func (eluo *EmailLogsUpdateOne) SetMetadata(m map[string]interface{}) *EmailLogsUpdateOne {
	eluo.mutation.SetMetadata(m)
	return eluo
}

// ClearMetadata clears the value of the "metadata" field.
func (eluo *EmailLogsUpdateOne) ClearMetadata() *EmailLogsUpdateOne {
	eluo.mutation.ClearMetadata()
	return eluo
}

// SetErrorMessage sets the "error_message" field.
func (eluo *EmailLogsUpdateOne) SetErrorMessage(s string) *EmailLogsUpdateOne {
	eluo.mutation.SetErrorMessage(s)
	return eluo
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (eluo *EmailLogsUpdateOne) SetNillableErrorMessage(s *string) *EmailLogsUpdateOne {
	if s != nil {
		eluo.SetErrorMessage(*s)
	}
	return eluo
}

// ClearErrorMessage clears the value of the "error_message" field.
func (eluo *EmailLogsUpdateOne) ClearErrorMessage() *EmailLogsUpdateOne {
	eluo.mutation.ClearErrorMessage()
	return eluo
}

// SetDeliveredAt sets the "delivered_at" field.
func (eluo *EmailLogsUpdateOne) SetDeliveredAt(t time.Time) *EmailLogsUpdateOne {
	eluo.mutation.SetDeliveredAt(t)
	return eluo
}

// SetNillableDeliveredAt sets the "delivered_at" field if the given value is not nil.
func (eluo *EmailLogsUpdateOne) SetNillableDeliveredAt(t *time.Time) *EmailLogsUpdateOne {
	if t != nil {
		eluo.SetDeliveredAt(*t)
	}
	return eluo
}

// ClearDeliveredAt clears the value of the "delivered_at" field.
func (eluo *EmailLogsUpdateOne) ClearDeliveredAt() *EmailLogsUpdateOne {
	eluo.mutation.ClearDeliveredAt()
	return eluo
}

// Mutation returns the EmailLogsMutation object of the builder.
func (eluo *EmailLogsUpdateOne) Mutation() *EmailLogsMutation {
	return eluo.mutation
}

// Where appends a list predicates to the EmailLogsUpdate builder.
func (eluo *EmailLogsUpdateOne) Where(ps ...predicate.EmailLogs) *EmailLogsUpdateOne {
	eluo.mutation.Where(ps...)
	return eluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eluo *EmailLogsUpdateOne) Select(field string, fields ...string) *EmailLogsUpdateOne {
	eluo.fields = append([]string{field}, fields...)
	return eluo
}

// Save executes the query and returns the updated EmailLogs entity.
func (eluo *EmailLogsUpdateOne) Save(ctx context.Context) (*EmailLogs, error) {
	return withHooks(ctx, eluo.sqlSave, eluo.mutation, eluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eluo *EmailLogsUpdateOne) SaveX(ctx context.Context) *EmailLogs {
	node, err := eluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eluo *EmailLogsUpdateOne) Exec(ctx context.Context) error {
	_, err := eluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eluo *EmailLogsUpdateOne) ExecX(ctx context.Context) {
	if err := eluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eluo *EmailLogsUpdateOne) check() error {
	if v, ok := eluo.mutation.Recipient(); ok {
		if err := emaillogs.RecipientValidator(v); err != nil {
			return &ValidationError{Name: "recipient", err: fmt.Errorf(`ent: validator failed for field "EmailLogs.recipient": %w`, err)}
		}
	}
	if v, ok := eluo.mutation.EmailType(); ok {
		if err := emaillogs.EmailTypeValidator(v); err != nil {
			return &ValidationError{Name: "email_type", err: fmt.Errorf(`ent: validator failed for field "EmailLogs.email_type": %w`, err)}
		}
	}
	return nil
}

func (eluo *EmailLogsUpdateOne) sqlSave(ctx context.Context) (_node *EmailLogs, err error) {
	if err := eluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(emaillogs.Table, emaillogs.Columns, sqlgraph.NewFieldSpec(emaillogs.FieldID, field.TypeUUID))
	id, ok := eluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmailLogs.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emaillogs.FieldID)
		for _, f := range fields {
			if !emaillogs.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != emaillogs.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eluo.mutation.UserID(); ok {
		_spec.SetField(emaillogs.FieldUserID, field.TypeUUID, value)
	}
	if eluo.mutation.UserIDCleared() {
		_spec.ClearField(emaillogs.FieldUserID, field.TypeUUID)
	}
	if value, ok := eluo.mutation.Recipient(); ok {
		_spec.SetField(emaillogs.FieldRecipient, field.TypeString, value)
	}
	if value, ok := eluo.mutation.EmailType(); ok {
		_spec.SetField(emaillogs.FieldEmailType, field.TypeString, value)
	}
	if value, ok := eluo.mutation.Subject(); ok {
		_spec.SetField(emaillogs.FieldSubject, field.TypeString, value)
	}
	if eluo.mutation.SubjectCleared() {
		_spec.ClearField(emaillogs.FieldSubject, field.TypeString)
	}
	if value, ok := eluo.mutation.Status(); ok {
		_spec.SetField(emaillogs.FieldStatus, field.TypeString, value)
	}
	if value, ok := eluo.mutation.Provider(); ok {
		_spec.SetField(emaillogs.FieldProvider, field.TypeString, value)
	}
	if value, ok := eluo.mutation.ProviderMessageID(); ok {
		_spec.SetField(emaillogs.FieldProviderMessageID, field.TypeString, value)
	}
	if eluo.mutation.ProviderMessageIDCleared() {
		_spec.ClearField(emaillogs.FieldProviderMessageID, field.TypeString)
	}
	if value, ok := eluo.mutation.Metadata(); ok {
		_spec.SetField(emaillogs.FieldMetadata, field.TypeJSON, value)
	}
	if eluo.mutation.MetadataCleared() {
		_spec.ClearField(emaillogs.FieldMetadata, field.TypeJSON)
	}
	if value, ok := eluo.mutation.ErrorMessage(); ok {
		_spec.SetField(emaillogs.FieldErrorMessage, field.TypeString, value)
	}
	if eluo.mutation.ErrorMessageCleared() {
		_spec.ClearField(emaillogs.FieldErrorMessage, field.TypeString)
	}
	if value, ok := eluo.mutation.DeliveredAt(); ok {
		_spec.SetField(emaillogs.FieldDeliveredAt, field.TypeTime, value)
	}
	if eluo.mutation.DeliveredAtCleared() {
		_spec.ClearField(emaillogs.FieldDeliveredAt, field.TypeTime)
	}
	_node = &EmailLogs{config: eluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emaillogs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eluo.mutation.done = true
	return _node, nil
}
