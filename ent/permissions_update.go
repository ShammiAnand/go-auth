// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shammianand/go-auth/ent/permissions"
	"github.com/shammianand/go-auth/ent/predicate"
	"github.com/shammianand/go-auth/ent/rolepermissions"
)

// PermissionsUpdate is the builder for updating Permissions entities.
type PermissionsUpdate struct {
	config
	hooks    []Hook
	mutation *PermissionsMutation
}

// Where appends a list predicates to the PermissionsUpdate builder.
func (pu *PermissionsUpdate) Where(ps ...predicate.Permissions) *PermissionsUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCode sets the "code" field.
func (pu *PermissionsUpdate) SetCode(s string) *PermissionsUpdate {
	pu.mutation.SetCode(s)
	return pu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (pu *PermissionsUpdate) SetNillableCode(s *string) *PermissionsUpdate {
	if s != nil {
		pu.SetCode(*s)
	}
	return pu
}

// SetName sets the "name" field.
func (pu *PermissionsUpdate) SetName(s string) *PermissionsUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PermissionsUpdate) SetNillableName(s *string) *PermissionsUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *PermissionsUpdate) SetDescription(s string) *PermissionsUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PermissionsUpdate) SetNillableDescription(s *string) *PermissionsUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PermissionsUpdate) ClearDescription() *PermissionsUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetResource sets the "resource" field.
func (pu *PermissionsUpdate) SetResource(s string) *PermissionsUpdate {
	pu.mutation.SetResource(s)
	return pu
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (pu *PermissionsUpdate) SetNillableResource(s *string) *PermissionsUpdate {
	if s != nil {
		pu.SetResource(*s)
	}
	return pu
}

// ClearResource clears the value of the "resource" field.
func (pu *PermissionsUpdate) ClearResource() *PermissionsUpdate {
	pu.mutation.ClearResource()
	return pu
}

// SetAction sets the "action" field.
func (pu *PermissionsUpdate) SetAction(s string) *PermissionsUpdate {
	pu.mutation.SetAction(s)
	return pu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (pu *PermissionsUpdate) SetNillableAction(s *string) *PermissionsUpdate {
	if s != nil {
		pu.SetAction(*s)
	}
	return pu
}

// ClearAction clears the value of the "action" field.
func (pu *PermissionsUpdate) ClearAction() *PermissionsUpdate {
	pu.mutation.ClearAction()
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PermissionsUpdate) SetUpdatedAt(t time.Time) *PermissionsUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// AddRolePermissionIDs adds the "role_permissions" edge to the RolePermissions entity by IDs.
func (pu *PermissionsUpdate) AddRolePermissionIDs(ids ...int) *PermissionsUpdate {
	pu.mutation.AddRolePermissionIDs(ids...)
	return pu
}

// AddRolePermissions adds the "role_permissions" edges to the RolePermissions entity.
func (pu *PermissionsUpdate) AddRolePermissions(r ...*RolePermissions) *PermissionsUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRolePermissionIDs(ids...)
}

// Mutation returns the PermissionsMutation object of the builder.
func (pu *PermissionsUpdate) Mutation() *PermissionsMutation {
	return pu.mutation
}

// ClearRolePermissions clears all "role_permissions" edges to the RolePermissions entity.
func (pu *PermissionsUpdate) ClearRolePermissions() *PermissionsUpdate {
	pu.mutation.ClearRolePermissions()
	return pu
}

// RemoveRolePermissionIDs removes the "role_permissions" edge to RolePermissions entities by IDs.
func (pu *PermissionsUpdate) RemoveRolePermissionIDs(ids ...int) *PermissionsUpdate {
	pu.mutation.RemoveRolePermissionIDs(ids...)
	return pu
}

// RemoveRolePermissions removes "role_permissions" edges to RolePermissions entities.
func (pu *PermissionsUpdate) RemoveRolePermissions(r ...*RolePermissions) *PermissionsUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRolePermissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PermissionsUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PermissionsUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PermissionsUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PermissionsUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PermissionsUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := permissions.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PermissionsUpdate) check() error {
	if v, ok := pu.mutation.Code(); ok {
		if err := permissions.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Permissions.code": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Name(); ok {
		if err := permissions.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Permissions.name": %w`, err)}
		}
	}
	return nil
}

func (pu *PermissionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(permissions.Table, permissions.Columns, sqlgraph.NewFieldSpec(permissions.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Code(); ok {
		_spec.SetField(permissions.FieldCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(permissions.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(permissions.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(permissions.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.Resource(); ok {
		_spec.SetField(permissions.FieldResource, field.TypeString, value)
	}
	if pu.mutation.ResourceCleared() {
		_spec.ClearField(permissions.FieldResource, field.TypeString)
	}
	if value, ok := pu.mutation.Action(); ok {
		_spec.SetField(permissions.FieldAction, field.TypeString, value)
	}
	if pu.mutation.ActionCleared() {
		_spec.ClearField(permissions.FieldAction, field.TypeString)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(permissions.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.RolePermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   permissions.RolePermissionsTable,
			Columns: []string{permissions.RolePermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepermissions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRolePermissionsIDs(); len(nodes) > 0 && !pu.mutation.RolePermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   permissions.RolePermissionsTable,
			Columns: []string{permissions.RolePermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepermissions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RolePermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   permissions.RolePermissionsTable,
			Columns: []string{permissions.RolePermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepermissions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permissions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PermissionsUpdateOne is the builder for updating a single Permissions entity.
type PermissionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PermissionsMutation
}

// SetCode sets the "code" field.
func (puo *PermissionsUpdateOne) SetCode(s string) *PermissionsUpdateOne {
	puo.mutation.SetCode(s)
	return puo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (puo *PermissionsUpdateOne) SetNillableCode(s *string) *PermissionsUpdateOne {
	if s != nil {
		puo.SetCode(*s)
	}
	return puo
}

// SetName sets the "name" field.
func (puo *PermissionsUpdateOne) SetName(s string) *PermissionsUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PermissionsUpdateOne) SetNillableName(s *string) *PermissionsUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *PermissionsUpdateOne) SetDescription(s string) *PermissionsUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PermissionsUpdateOne) SetNillableDescription(s *string) *PermissionsUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PermissionsUpdateOne) ClearDescription() *PermissionsUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetResource sets the "resource" field.
func (puo *PermissionsUpdateOne) SetResource(s string) *PermissionsUpdateOne {
	puo.mutation.SetResource(s)
	return puo
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (puo *PermissionsUpdateOne) SetNillableResource(s *string) *PermissionsUpdateOne {
	if s != nil {
		puo.SetResource(*s)
	}
	return puo
}

// ClearResource clears the value of the "resource" field.
func (puo *PermissionsUpdateOne) ClearResource() *PermissionsUpdateOne {
	puo.mutation.ClearResource()
	return puo
}

// SetAction sets the "action" field.
func (puo *PermissionsUpdateOne) SetAction(s string) *PermissionsUpdateOne {
	puo.mutation.SetAction(s)
	return puo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (puo *PermissionsUpdateOne) SetNillableAction(s *string) *PermissionsUpdateOne {
	if s != nil {
		puo.SetAction(*s)
	}
	return puo
}

// ClearAction clears the value of the "action" field.
func (puo *PermissionsUpdateOne) ClearAction() *PermissionsUpdateOne {
	puo.mutation.ClearAction()
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PermissionsUpdateOne) SetUpdatedAt(t time.Time) *PermissionsUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// AddRolePermissionIDs adds the "role_permissions" edge to the RolePermissions entity by IDs.
func (puo *PermissionsUpdateOne) AddRolePermissionIDs(ids ...int) *PermissionsUpdateOne {
	puo.mutation.AddRolePermissionIDs(ids...)
	return puo
}

// AddRolePermissions adds the "role_permissions" edges to the RolePermissions entity.
func (puo *PermissionsUpdateOne) AddRolePermissions(r ...*RolePermissions) *PermissionsUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRolePermissionIDs(ids...)
}

// Mutation returns the PermissionsMutation object of the builder.
func (puo *PermissionsUpdateOne) Mutation() *PermissionsMutation {
	return puo.mutation
}

// ClearRolePermissions clears all "role_permissions" edges to the RolePermissions entity.
func (puo *PermissionsUpdateOne) ClearRolePermissions() *PermissionsUpdateOne {
	puo.mutation.ClearRolePermissions()
	return puo
}

// RemoveRolePermissionIDs removes the "role_permissions" edge to RolePermissions entities by IDs.
func (puo *PermissionsUpdateOne) RemoveRolePermissionIDs(ids ...int) *PermissionsUpdateOne {
	puo.mutation.RemoveRolePermissionIDs(ids...)
	return puo
}

// RemoveRolePermissions removes "role_permissions" edges to RolePermissions entities.
func (puo *PermissionsUpdateOne) RemoveRolePermissions(r ...*RolePermissions) *PermissionsUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRolePermissionIDs(ids...)
}

// Where appends a list predicates to the PermissionsUpdate builder.
func (puo *PermissionsUpdateOne) Where(ps ...predicate.Permissions) *PermissionsUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PermissionsUpdateOne) Select(field string, fields ...string) *PermissionsUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Permissions entity.
func (puo *PermissionsUpdateOne) Save(ctx context.Context) (*Permissions, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PermissionsUpdateOne) SaveX(ctx context.Context) *Permissions {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PermissionsUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PermissionsUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PermissionsUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := permissions.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PermissionsUpdateOne) check() error {
	if v, ok := puo.mutation.Code(); ok {
		if err := permissions.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Permissions.code": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Name(); ok {
		if err := permissions.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Permissions.name": %w`, err)}
		}
	}
	return nil
}

func (puo *PermissionsUpdateOne) sqlSave(ctx context.Context) (_node *Permissions, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(permissions.Table, permissions.Columns, sqlgraph.NewFieldSpec(permissions.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Permissions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, permissions.FieldID)
		for _, f := range fields {
			if !permissions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != permissions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Code(); ok {
		_spec.SetField(permissions.FieldCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(permissions.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(permissions.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(permissions.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.Resource(); ok {
		_spec.SetField(permissions.FieldResource, field.TypeString, value)
	}
	if puo.mutation.ResourceCleared() {
		_spec.ClearField(permissions.FieldResource, field.TypeString)
	}
	if value, ok := puo.mutation.Action(); ok {
		_spec.SetField(permissions.FieldAction, field.TypeString, value)
	}
	if puo.mutation.ActionCleared() {
		_spec.ClearField(permissions.FieldAction, field.TypeString)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(permissions.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.RolePermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   permissions.RolePermissionsTable,
			Columns: []string{permissions.RolePermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepermissions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRolePermissionsIDs(); len(nodes) > 0 && !puo.mutation.RolePermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   permissions.RolePermissionsTable,
			Columns: []string{permissions.RolePermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepermissions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RolePermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   permissions.RolePermissionsTable,
			Columns: []string{permissions.RolePermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepermissions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Permissions{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permissions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
