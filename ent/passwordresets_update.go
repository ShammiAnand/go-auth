// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shammianand/go-auth/ent/passwordresets"
	"github.com/shammianand/go-auth/ent/predicate"
)

// PasswordResetsUpdate is the builder for updating PasswordResets entities.
type PasswordResetsUpdate struct {
	config
	hooks    []Hook
	mutation *PasswordResetsMutation
}

// Where appends a list predicates to the PasswordResetsUpdate builder.
func (pru *PasswordResetsUpdate) Where(ps ...predicate.PasswordResets) *PasswordResetsUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetUserID sets the "user_id" field.
func (pru *PasswordResetsUpdate) SetUserID(u uuid.UUID) *PasswordResetsUpdate {
	pru.mutation.SetUserID(u)
	return pru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pru *PasswordResetsUpdate) SetNillableUserID(u *uuid.UUID) *PasswordResetsUpdate {
	if u != nil {
		pru.SetUserID(*u)
	}
	return pru
}

// SetEmail sets the "email" field.
func (pru *PasswordResetsUpdate) SetEmail(s string) *PasswordResetsUpdate {
	pru.mutation.SetEmail(s)
	return pru
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pru *PasswordResetsUpdate) SetNillableEmail(s *string) *PasswordResetsUpdate {
	if s != nil {
		pru.SetEmail(*s)
	}
	return pru
}

// SetToken sets the "token" field.
func (pru *PasswordResetsUpdate) SetToken(s string) *PasswordResetsUpdate {
	pru.mutation.SetToken(s)
	return pru
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (pru *PasswordResetsUpdate) SetNillableToken(s *string) *PasswordResetsUpdate {
	if s != nil {
		pru.SetToken(*s)
	}
	return pru
}

// SetExpiresAt sets the "expires_at" field.
func (pru *PasswordResetsUpdate) SetExpiresAt(t time.Time) *PasswordResetsUpdate {
	pru.mutation.SetExpiresAt(t)
	return pru
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (pru *PasswordResetsUpdate) SetNillableExpiresAt(t *time.Time) *PasswordResetsUpdate {
	if t != nil {
		pru.SetExpiresAt(*t)
	}
	return pru
}

// SetIsUsed sets the "is_used" field.
func (pru *PasswordResetsUpdate) SetIsUsed(b bool) *PasswordResetsUpdate {
	pru.mutation.SetIsUsed(b)
	return pru
}

// SetNillableIsUsed sets the "is_used" field if the given value is not nil.
func (pru *PasswordResetsUpdate) SetNillableIsUsed(b *bool) *PasswordResetsUpdate {
	if b != nil {
		pru.SetIsUsed(*b)
	}
	return pru
}

// SetUsedAt sets the "used_at" field.
func (pru *PasswordResetsUpdate) SetUsedAt(t time.Time) *PasswordResetsUpdate {
	pru.mutation.SetUsedAt(t)
	return pru
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (pru *PasswordResetsUpdate) SetNillableUsedAt(t *time.Time) *PasswordResetsUpdate {
	if t != nil {
		pru.SetUsedAt(*t)
	}
	return pru
}

// ClearUsedAt clears the value of the "used_at" field.
func (pru *PasswordResetsUpdate) ClearUsedAt() *PasswordResetsUpdate {
	pru.mutation.ClearUsedAt()
	return pru
}

// SetIPAddress sets the "ip_address" field.
func (pru *PasswordResetsUpdate) SetIPAddress(s string) *PasswordResetsUpdate {
	pru.mutation.SetIPAddress(s)
	return pru
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (pru *PasswordResetsUpdate) SetNillableIPAddress(s *string) *PasswordResetsUpdate {
	if s != nil {
		pru.SetIPAddress(*s)
	}
	return pru
}

// ClearIPAddress clears the value of the "ip_address" field.
func (pru *PasswordResetsUpdate) ClearIPAddress() *PasswordResetsUpdate {
	pru.mutation.ClearIPAddress()
	return pru
}

// Mutation returns the PasswordResetsMutation object of the builder.
func (pru *PasswordResetsUpdate) Mutation() *PasswordResetsMutation {
	return pru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PasswordResetsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PasswordResetsUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PasswordResetsUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PasswordResetsUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pru *PasswordResetsUpdate) check() error {
	if v, ok := pru.mutation.Email(); ok {
		if err := passwordresets.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "PasswordResets.email": %w`, err)}
		}
	}
	if v, ok := pru.mutation.Token(); ok {
		if err := passwordresets.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "PasswordResets.token": %w`, err)}
		}
	}
	return nil
}

func (pru *PasswordResetsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(passwordresets.Table, passwordresets.Columns, sqlgraph.NewFieldSpec(passwordresets.FieldID, field.TypeUUID))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.UserID(); ok {
		_spec.SetField(passwordresets.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := pru.mutation.Email(); ok {
		_spec.SetField(passwordresets.FieldEmail, field.TypeString, value)
	}
	if value, ok := pru.mutation.Token(); ok {
		_spec.SetField(passwordresets.FieldToken, field.TypeString, value)
	}
	if value, ok := pru.mutation.ExpiresAt(); ok {
		_spec.SetField(passwordresets.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := pru.mutation.IsUsed(); ok {
		_spec.SetField(passwordresets.FieldIsUsed, field.TypeBool, value)
	}
	if value, ok := pru.mutation.UsedAt(); ok {
		_spec.SetField(passwordresets.FieldUsedAt, field.TypeTime, value)
	}
	if pru.mutation.UsedAtCleared() {
		_spec.ClearField(passwordresets.FieldUsedAt, field.TypeTime)
	}
	if value, ok := pru.mutation.IPAddress(); ok {
		_spec.SetField(passwordresets.FieldIPAddress, field.TypeString, value)
	}
	if pru.mutation.IPAddressCleared() {
		_spec.ClearField(passwordresets.FieldIPAddress, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{passwordresets.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// PasswordResetsUpdateOne is the builder for updating a single PasswordResets entity.
type PasswordResetsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PasswordResetsMutation
}

// SetUserID sets the "user_id" field.
func (pruo *PasswordResetsUpdateOne) SetUserID(u uuid.UUID) *PasswordResetsUpdateOne {
	pruo.mutation.SetUserID(u)
	return pruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pruo *PasswordResetsUpdateOne) SetNillableUserID(u *uuid.UUID) *PasswordResetsUpdateOne {
	if u != nil {
		pruo.SetUserID(*u)
	}
	return pruo
}

// SetEmail sets the "email" field.
func (pruo *PasswordResetsUpdateOne) SetEmail(s string) *PasswordResetsUpdateOne {
	pruo.mutation.SetEmail(s)
	return pruo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pruo *PasswordResetsUpdateOne) SetNillableEmail(s *string) *PasswordResetsUpdateOne {
	if s != nil {
		pruo.SetEmail(*s)
	}
	return pruo
}

// SetToken sets the "token" field.
func (pruo *PasswordResetsUpdateOne) SetToken(s string) *PasswordResetsUpdateOne {
	pruo.mutation.SetToken(s)
	return pruo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (pruo *PasswordResetsUpdateOne) SetNillableToken(s *string) *PasswordResetsUpdateOne {
	if s != nil {
		pruo.SetToken(*s)
	}
	return pruo
}

// SetExpiresAt sets the "expires_at" field.
func (pruo *PasswordResetsUpdateOne) SetExpiresAt(t time.Time) *PasswordResetsUpdateOne {
	pruo.mutation.SetExpiresAt(t)
	return pruo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (pruo *PasswordResetsUpdateOne) SetNillableExpiresAt(t *time.Time) *PasswordResetsUpdateOne {
	if t != nil {
		pruo.SetExpiresAt(*t)
	}
	return pruo
}

// SetIsUsed sets the "is_used" field.
func (pruo *PasswordResetsUpdateOne) SetIsUsed(b bool) *PasswordResetsUpdateOne {
	pruo.mutation.SetIsUsed(b)
	return pruo
}

// SetNillableIsUsed sets the "is_used" field if the given value is not nil.
func (pruo *PasswordResetsUpdateOne) SetNillableIsUsed(b *bool) *PasswordResetsUpdateOne {
	if b != nil {
		pruo.SetIsUsed(*b)
	}
	return pruo
}

// SetUsedAt sets the "used_at" field.
func (pruo *PasswordResetsUpdateOne) SetUsedAt(t time.Time) *PasswordResetsUpdateOne {
	pruo.mutation.SetUsedAt(t)
	return pruo
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (pruo *PasswordResetsUpdateOne) SetNillableUsedAt(t *time.Time) *PasswordResetsUpdateOne {
	if t != nil {
		pruo.SetUsedAt(*t)
	}
	return pruo
}

// ClearUsedAt clears the value of the "used_at" field.
func (pruo *PasswordResetsUpdateOne) ClearUsedAt() *PasswordResetsUpdateOne {
	pruo.mutation.ClearUsedAt()
	return pruo
}

// SetIPAddress sets the "ip_address" field.
func (pruo *PasswordResetsUpdateOne) SetIPAddress(s string) *PasswordResetsUpdateOne {
	pruo.mutation.SetIPAddress(s)
	return pruo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (pruo *PasswordResetsUpdateOne) SetNillableIPAddress(s *string) *PasswordResetsUpdateOne {
	if s != nil {
		pruo.SetIPAddress(*s)
	}
	return pruo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (pruo *PasswordResetsUpdateOne) ClearIPAddress() *PasswordResetsUpdateOne {
	pruo.mutation.ClearIPAddress()
	return pruo
}

// Mutation returns the PasswordResetsMutation object of the builder.
func (pruo *PasswordResetsUpdateOne) Mutation() *PasswordResetsMutation {
	return pruo.mutation
}

// Where appends a list predicates to the PasswordResetsUpdate builder.
func (pruo *PasswordResetsUpdateOne) Where(ps ...predicate.PasswordResets) *PasswordResetsUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PasswordResetsUpdateOne) Select(field string, fields ...string) *PasswordResetsUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PasswordResets entity.
func (pruo *PasswordResetsUpdateOne) Save(ctx context.Context) (*PasswordResets, error) {
	return withHooks(ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PasswordResetsUpdateOne) SaveX(ctx context.Context) *PasswordResets {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PasswordResetsUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PasswordResetsUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pruo *PasswordResetsUpdateOne) check() error {
	if v, ok := pruo.mutation.Email(); ok {
		if err := passwordresets.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "PasswordResets.email": %w`, err)}
		}
	}
	if v, ok := pruo.mutation.Token(); ok {
		if err := passwordresets.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "PasswordResets.token": %w`, err)}
		}
	}
	return nil
}

func (pruo *PasswordResetsUpdateOne) sqlSave(ctx context.Context) (_node *PasswordResets, err error) {
	if err := pruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(passwordresets.Table, passwordresets.Columns, sqlgraph.NewFieldSpec(passwordresets.FieldID, field.TypeUUID))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PasswordResets.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, passwordresets.FieldID)
		for _, f := range fields {
			if !passwordresets.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != passwordresets.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.UserID(); ok {
		_spec.SetField(passwordresets.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := pruo.mutation.Email(); ok {
		_spec.SetField(passwordresets.FieldEmail, field.TypeString, value)
	}
	if value, ok := pruo.mutation.Token(); ok {
		_spec.SetField(passwordresets.FieldToken, field.TypeString, value)
	}
	if value, ok := pruo.mutation.ExpiresAt(); ok {
		_spec.SetField(passwordresets.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := pruo.mutation.IsUsed(); ok {
		_spec.SetField(passwordresets.FieldIsUsed, field.TypeBool, value)
	}
	if value, ok := pruo.mutation.UsedAt(); ok {
		_spec.SetField(passwordresets.FieldUsedAt, field.TypeTime, value)
	}
	if pruo.mutation.UsedAtCleared() {
		_spec.ClearField(passwordresets.FieldUsedAt, field.TypeTime)
	}
	if value, ok := pruo.mutation.IPAddress(); ok {
		_spec.SetField(passwordresets.FieldIPAddress, field.TypeString, value)
	}
	if pruo.mutation.IPAddressCleared() {
		_spec.ClearField(passwordresets.FieldIPAddress, field.TypeString)
	}
	_node = &PasswordResets{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{passwordresets.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
