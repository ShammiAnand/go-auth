// Code generated by ent, DO NOT EDIT.

package emaillogs

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shammianand/go-auth/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldUserID, v))
}

// Recipient applies equality check predicate on the "recipient" field. It's identical to RecipientEQ.
func Recipient(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldRecipient, v))
}

// EmailType applies equality check predicate on the "email_type" field. It's identical to EmailTypeEQ.
func EmailType(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldEmailType, v))
}

// Subject applies equality check predicate on the "subject" field. It's identical to SubjectEQ.
func Subject(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldSubject, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldStatus, v))
}

// Provider applies equality check predicate on the "provider" field. It's identical to ProviderEQ.
func Provider(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldProvider, v))
}

// ProviderMessageID applies equality check predicate on the "provider_message_id" field. It's identical to ProviderMessageIDEQ.
func ProviderMessageID(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldProviderMessageID, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldErrorMessage, v))
}

// SentAt applies equality check predicate on the "sent_at" field. It's identical to SentAtEQ.
func SentAt(v time.Time) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldSentAt, v))
}

// DeliveredAt applies equality check predicate on the "delivered_at" field. It's identical to DeliveredAtEQ.
func DeliveredAt(v time.Time) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldDeliveredAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLTE(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNotNull(FieldUserID))
}

// RecipientEQ applies the EQ predicate on the "recipient" field.
func RecipientEQ(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldRecipient, v))
}

// RecipientNEQ applies the NEQ predicate on the "recipient" field.
func RecipientNEQ(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNEQ(FieldRecipient, v))
}

// RecipientIn applies the In predicate on the "recipient" field.
func RecipientIn(vs ...string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldIn(FieldRecipient, vs...))
}

// RecipientNotIn applies the NotIn predicate on the "recipient" field.
func RecipientNotIn(vs ...string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNotIn(FieldRecipient, vs...))
}

// RecipientGT applies the GT predicate on the "recipient" field.
func RecipientGT(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGT(FieldRecipient, v))
}

// RecipientGTE applies the GTE predicate on the "recipient" field.
func RecipientGTE(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGTE(FieldRecipient, v))
}

// RecipientLT applies the LT predicate on the "recipient" field.
func RecipientLT(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLT(FieldRecipient, v))
}

// RecipientLTE applies the LTE predicate on the "recipient" field.
func RecipientLTE(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLTE(FieldRecipient, v))
}

// RecipientContains applies the Contains predicate on the "recipient" field.
func RecipientContains(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldContains(FieldRecipient, v))
}

// RecipientHasPrefix applies the HasPrefix predicate on the "recipient" field.
func RecipientHasPrefix(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldHasPrefix(FieldRecipient, v))
}

// RecipientHasSuffix applies the HasSuffix predicate on the "recipient" field.
func RecipientHasSuffix(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldHasSuffix(FieldRecipient, v))
}

// RecipientEqualFold applies the EqualFold predicate on the "recipient" field.
func RecipientEqualFold(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEqualFold(FieldRecipient, v))
}

// RecipientContainsFold applies the ContainsFold predicate on the "recipient" field.
func RecipientContainsFold(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldContainsFold(FieldRecipient, v))
}

// EmailTypeEQ applies the EQ predicate on the "email_type" field.
func EmailTypeEQ(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldEmailType, v))
}

// EmailTypeNEQ applies the NEQ predicate on the "email_type" field.
func EmailTypeNEQ(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNEQ(FieldEmailType, v))
}

// EmailTypeIn applies the In predicate on the "email_type" field.
func EmailTypeIn(vs ...string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldIn(FieldEmailType, vs...))
}

// EmailTypeNotIn applies the NotIn predicate on the "email_type" field.
func EmailTypeNotIn(vs ...string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNotIn(FieldEmailType, vs...))
}

// EmailTypeGT applies the GT predicate on the "email_type" field.
func EmailTypeGT(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGT(FieldEmailType, v))
}

// EmailTypeGTE applies the GTE predicate on the "email_type" field.
func EmailTypeGTE(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGTE(FieldEmailType, v))
}

// EmailTypeLT applies the LT predicate on the "email_type" field.
func EmailTypeLT(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLT(FieldEmailType, v))
}

// EmailTypeLTE applies the LTE predicate on the "email_type" field.
func EmailTypeLTE(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLTE(FieldEmailType, v))
}

// EmailTypeContains applies the Contains predicate on the "email_type" field.
func EmailTypeContains(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldContains(FieldEmailType, v))
}

// EmailTypeHasPrefix applies the HasPrefix predicate on the "email_type" field.
func EmailTypeHasPrefix(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldHasPrefix(FieldEmailType, v))
}

// EmailTypeHasSuffix applies the HasSuffix predicate on the "email_type" field.
func EmailTypeHasSuffix(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldHasSuffix(FieldEmailType, v))
}

// EmailTypeEqualFold applies the EqualFold predicate on the "email_type" field.
func EmailTypeEqualFold(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEqualFold(FieldEmailType, v))
}

// EmailTypeContainsFold applies the ContainsFold predicate on the "email_type" field.
func EmailTypeContainsFold(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldContainsFold(FieldEmailType, v))
}

// SubjectEQ applies the EQ predicate on the "subject" field.
func SubjectEQ(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldSubject, v))
}

// SubjectNEQ applies the NEQ predicate on the "subject" field.
func SubjectNEQ(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNEQ(FieldSubject, v))
}

// SubjectIn applies the In predicate on the "subject" field.
func SubjectIn(vs ...string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldIn(FieldSubject, vs...))
}

// SubjectNotIn applies the NotIn predicate on the "subject" field.
func SubjectNotIn(vs ...string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNotIn(FieldSubject, vs...))
}

// SubjectGT applies the GT predicate on the "subject" field.
func SubjectGT(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGT(FieldSubject, v))
}

// SubjectGTE applies the GTE predicate on the "subject" field.
func SubjectGTE(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGTE(FieldSubject, v))
}

// SubjectLT applies the LT predicate on the "subject" field.
func SubjectLT(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLT(FieldSubject, v))
}

// SubjectLTE applies the LTE predicate on the "subject" field.
func SubjectLTE(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLTE(FieldSubject, v))
}

// SubjectContains applies the Contains predicate on the "subject" field.
func SubjectContains(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldContains(FieldSubject, v))
}

// SubjectHasPrefix applies the HasPrefix predicate on the "subject" field.
func SubjectHasPrefix(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldHasPrefix(FieldSubject, v))
}

// SubjectHasSuffix applies the HasSuffix predicate on the "subject" field.
func SubjectHasSuffix(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldHasSuffix(FieldSubject, v))
}

// SubjectIsNil applies the IsNil predicate on the "subject" field.
func SubjectIsNil() predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldIsNull(FieldSubject))
}

// SubjectNotNil applies the NotNil predicate on the "subject" field.
func SubjectNotNil() predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNotNull(FieldSubject))
}

// SubjectEqualFold applies the EqualFold predicate on the "subject" field.
func SubjectEqualFold(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEqualFold(FieldSubject, v))
}

// SubjectContainsFold applies the ContainsFold predicate on the "subject" field.
func SubjectContainsFold(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldContainsFold(FieldSubject, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldContainsFold(FieldStatus, v))
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldProvider, v))
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNEQ(FieldProvider, v))
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldIn(FieldProvider, vs...))
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNotIn(FieldProvider, vs...))
}

// ProviderGT applies the GT predicate on the "provider" field.
func ProviderGT(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGT(FieldProvider, v))
}

// ProviderGTE applies the GTE predicate on the "provider" field.
func ProviderGTE(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGTE(FieldProvider, v))
}

// ProviderLT applies the LT predicate on the "provider" field.
func ProviderLT(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLT(FieldProvider, v))
}

// ProviderLTE applies the LTE predicate on the "provider" field.
func ProviderLTE(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLTE(FieldProvider, v))
}

// ProviderContains applies the Contains predicate on the "provider" field.
func ProviderContains(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldContains(FieldProvider, v))
}

// ProviderHasPrefix applies the HasPrefix predicate on the "provider" field.
func ProviderHasPrefix(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldHasPrefix(FieldProvider, v))
}

// ProviderHasSuffix applies the HasSuffix predicate on the "provider" field.
func ProviderHasSuffix(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldHasSuffix(FieldProvider, v))
}

// ProviderEqualFold applies the EqualFold predicate on the "provider" field.
func ProviderEqualFold(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEqualFold(FieldProvider, v))
}

// ProviderContainsFold applies the ContainsFold predicate on the "provider" field.
func ProviderContainsFold(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldContainsFold(FieldProvider, v))
}

// ProviderMessageIDEQ applies the EQ predicate on the "provider_message_id" field.
func ProviderMessageIDEQ(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldProviderMessageID, v))
}

// ProviderMessageIDNEQ applies the NEQ predicate on the "provider_message_id" field.
func ProviderMessageIDNEQ(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNEQ(FieldProviderMessageID, v))
}

// ProviderMessageIDIn applies the In predicate on the "provider_message_id" field.
func ProviderMessageIDIn(vs ...string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldIn(FieldProviderMessageID, vs...))
}

// ProviderMessageIDNotIn applies the NotIn predicate on the "provider_message_id" field.
func ProviderMessageIDNotIn(vs ...string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNotIn(FieldProviderMessageID, vs...))
}

// ProviderMessageIDGT applies the GT predicate on the "provider_message_id" field.
func ProviderMessageIDGT(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGT(FieldProviderMessageID, v))
}

// ProviderMessageIDGTE applies the GTE predicate on the "provider_message_id" field.
func ProviderMessageIDGTE(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGTE(FieldProviderMessageID, v))
}

// ProviderMessageIDLT applies the LT predicate on the "provider_message_id" field.
func ProviderMessageIDLT(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLT(FieldProviderMessageID, v))
}

// ProviderMessageIDLTE applies the LTE predicate on the "provider_message_id" field.
func ProviderMessageIDLTE(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLTE(FieldProviderMessageID, v))
}

// ProviderMessageIDContains applies the Contains predicate on the "provider_message_id" field.
func ProviderMessageIDContains(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldContains(FieldProviderMessageID, v))
}

// ProviderMessageIDHasPrefix applies the HasPrefix predicate on the "provider_message_id" field.
func ProviderMessageIDHasPrefix(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldHasPrefix(FieldProviderMessageID, v))
}

// ProviderMessageIDHasSuffix applies the HasSuffix predicate on the "provider_message_id" field.
func ProviderMessageIDHasSuffix(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldHasSuffix(FieldProviderMessageID, v))
}

// ProviderMessageIDIsNil applies the IsNil predicate on the "provider_message_id" field.
func ProviderMessageIDIsNil() predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldIsNull(FieldProviderMessageID))
}

// ProviderMessageIDNotNil applies the NotNil predicate on the "provider_message_id" field.
func ProviderMessageIDNotNil() predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNotNull(FieldProviderMessageID))
}

// ProviderMessageIDEqualFold applies the EqualFold predicate on the "provider_message_id" field.
func ProviderMessageIDEqualFold(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEqualFold(FieldProviderMessageID, v))
}

// ProviderMessageIDContainsFold applies the ContainsFold predicate on the "provider_message_id" field.
func ProviderMessageIDContainsFold(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldContainsFold(FieldProviderMessageID, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNotNull(FieldMetadata))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldContainsFold(FieldErrorMessage, v))
}

// SentAtEQ applies the EQ predicate on the "sent_at" field.
func SentAtEQ(v time.Time) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldSentAt, v))
}

// SentAtNEQ applies the NEQ predicate on the "sent_at" field.
func SentAtNEQ(v time.Time) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNEQ(FieldSentAt, v))
}

// SentAtIn applies the In predicate on the "sent_at" field.
func SentAtIn(vs ...time.Time) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldIn(FieldSentAt, vs...))
}

// SentAtNotIn applies the NotIn predicate on the "sent_at" field.
func SentAtNotIn(vs ...time.Time) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNotIn(FieldSentAt, vs...))
}

// SentAtGT applies the GT predicate on the "sent_at" field.
func SentAtGT(v time.Time) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGT(FieldSentAt, v))
}

// SentAtGTE applies the GTE predicate on the "sent_at" field.
func SentAtGTE(v time.Time) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGTE(FieldSentAt, v))
}

// SentAtLT applies the LT predicate on the "sent_at" field.
func SentAtLT(v time.Time) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLT(FieldSentAt, v))
}

// SentAtLTE applies the LTE predicate on the "sent_at" field.
func SentAtLTE(v time.Time) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLTE(FieldSentAt, v))
}

// DeliveredAtEQ applies the EQ predicate on the "delivered_at" field.
func DeliveredAtEQ(v time.Time) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldEQ(FieldDeliveredAt, v))
}

// DeliveredAtNEQ applies the NEQ predicate on the "delivered_at" field.
func DeliveredAtNEQ(v time.Time) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNEQ(FieldDeliveredAt, v))
}

// DeliveredAtIn applies the In predicate on the "delivered_at" field.
func DeliveredAtIn(vs ...time.Time) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldIn(FieldDeliveredAt, vs...))
}

// DeliveredAtNotIn applies the NotIn predicate on the "delivered_at" field.
func DeliveredAtNotIn(vs ...time.Time) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNotIn(FieldDeliveredAt, vs...))
}

// DeliveredAtGT applies the GT predicate on the "delivered_at" field.
func DeliveredAtGT(v time.Time) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGT(FieldDeliveredAt, v))
}

// DeliveredAtGTE applies the GTE predicate on the "delivered_at" field.
func DeliveredAtGTE(v time.Time) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldGTE(FieldDeliveredAt, v))
}

// DeliveredAtLT applies the LT predicate on the "delivered_at" field.
func DeliveredAtLT(v time.Time) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLT(FieldDeliveredAt, v))
}

// DeliveredAtLTE applies the LTE predicate on the "delivered_at" field.
func DeliveredAtLTE(v time.Time) predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldLTE(FieldDeliveredAt, v))
}

// DeliveredAtIsNil applies the IsNil predicate on the "delivered_at" field.
func DeliveredAtIsNil() predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldIsNull(FieldDeliveredAt))
}

// DeliveredAtNotNil applies the NotNil predicate on the "delivered_at" field.
func DeliveredAtNotNil() predicate.EmailLogs {
	return predicate.EmailLogs(sql.FieldNotNull(FieldDeliveredAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EmailLogs) predicate.EmailLogs {
	return predicate.EmailLogs(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EmailLogs) predicate.EmailLogs {
	return predicate.EmailLogs(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EmailLogs) predicate.EmailLogs {
	return predicate.EmailLogs(sql.NotPredicates(p))
}
