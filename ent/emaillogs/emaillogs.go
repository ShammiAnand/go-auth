// Code generated by ent, DO NOT EDIT.

package emaillogs

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the emaillogs type in the database.
	Label = "email_logs"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldRecipient holds the string denoting the recipient field in the database.
	FieldRecipient = "recipient"
	// FieldEmailType holds the string denoting the email_type field in the database.
	FieldEmailType = "email_type"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldProvider holds the string denoting the provider field in the database.
	FieldProvider = "provider"
	// FieldProviderMessageID holds the string denoting the provider_message_id field in the database.
	FieldProviderMessageID = "provider_message_id"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldSentAt holds the string denoting the sent_at field in the database.
	FieldSentAt = "sent_at"
	// FieldDeliveredAt holds the string denoting the delivered_at field in the database.
	FieldDeliveredAt = "delivered_at"
	// Table holds the table name of the emaillogs in the database.
	Table = "email_logs"
)

// Columns holds all SQL columns for emaillogs fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldRecipient,
	FieldEmailType,
	FieldSubject,
	FieldStatus,
	FieldProvider,
	FieldProviderMessageID,
	FieldMetadata,
	FieldErrorMessage,
	FieldSentAt,
	FieldDeliveredAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// RecipientValidator is a validator for the "recipient" field. It is called by the builders before save.
	RecipientValidator func(string) error
	// EmailTypeValidator is a validator for the "email_type" field. It is called by the builders before save.
	EmailTypeValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultProvider holds the default value on creation for the "provider" field.
	DefaultProvider string
	// DefaultSentAt holds the default value on creation for the "sent_at" field.
	DefaultSentAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the EmailLogs queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByRecipient orders the results by the recipient field.
func ByRecipient(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecipient, opts...).ToFunc()
}

// ByEmailType orders the results by the email_type field.
func ByEmailType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailType, opts...).ToFunc()
}

// BySubject orders the results by the subject field.
func BySubject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubject, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByProvider orders the results by the provider field.
func ByProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvider, opts...).ToFunc()
}

// ByProviderMessageID orders the results by the provider_message_id field.
func ByProviderMessageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderMessageID, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// BySentAt orders the results by the sent_at field.
func BySentAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSentAt, opts...).ToFunc()
}

// ByDeliveredAt orders the results by the delivered_at field.
func ByDeliveredAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeliveredAt, opts...).ToFunc()
}
